// Generated by jextract

package org.jextract;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.FunctionDescriptor;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.Linker;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemoryLayout.PathElement;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.MethodHandle;
import java.util.function.Consumer;

/**
 * {@snippet lang = c:
 * struct ICoreWebView2_22Vtbl {
 *     HRESULT (*QueryInterface)(ICoreWebView2_22 *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(ICoreWebView2_22 *) __attribute__((stdcall));
 *     ULONG (*Release)(ICoreWebView2_22 *) __attribute__((stdcall));
 *     HRESULT (*get_Settings)(ICoreWebView2_22 *, ICoreWebView2Settings **) __attribute__((stdcall));
 *     HRESULT (*get_Source)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall));
 *     HRESULT (*Navigate)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*NavigateToString)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*add_NavigationStarting)(ICoreWebView2_22 *, ICoreWebView2NavigationStartingEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_NavigationStarting)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_ContentLoading)(ICoreWebView2_22 *, ICoreWebView2ContentLoadingEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_ContentLoading)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_SourceChanged)(ICoreWebView2_22 *, ICoreWebView2SourceChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_SourceChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_HistoryChanged)(ICoreWebView2_22 *, ICoreWebView2HistoryChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_HistoryChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_NavigationCompleted)(ICoreWebView2_22 *, ICoreWebView2NavigationCompletedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_NavigationCompleted)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_FrameNavigationStarting)(ICoreWebView2_22 *, ICoreWebView2NavigationStartingEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_FrameNavigationStarting)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_FrameNavigationCompleted)(ICoreWebView2_22 *, ICoreWebView2NavigationCompletedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_FrameNavigationCompleted)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_ScriptDialogOpening)(ICoreWebView2_22 *, ICoreWebView2ScriptDialogOpeningEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_ScriptDialogOpening)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_PermissionRequested)(ICoreWebView2_22 *, ICoreWebView2PermissionRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_PermissionRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_ProcessFailed)(ICoreWebView2_22 *, ICoreWebView2ProcessFailedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_ProcessFailed)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*AddScriptToExecuteOnDocumentCreated)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2AddScriptToExecuteOnDocumentCreatedCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*RemoveScriptToExecuteOnDocumentCreated)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*ExecuteScript)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2ExecuteScriptCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*CapturePreview)(ICoreWebView2_22 *, COREWEBVIEW2_CAPTURE_PREVIEW_IMAGE_FORMAT, IStream *, ICoreWebView2CapturePreviewCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*Reload)(ICoreWebView2_22 *) __attribute__((stdcall));
 *     HRESULT (*PostWebMessageAsJson)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*PostWebMessageAsString)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*add_WebMessageReceived)(ICoreWebView2_22 *, ICoreWebView2WebMessageReceivedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_WebMessageReceived)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*CallDevToolsProtocolMethod)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*get_BrowserProcessId)(ICoreWebView2_22 *, UINT32 *) __attribute__((stdcall));
 *     HRESULT (*get_CanGoBack)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*get_CanGoForward)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*GoBack)(ICoreWebView2_22 *) __attribute__((stdcall));
 *     HRESULT (*GoForward)(ICoreWebView2_22 *) __attribute__((stdcall));
 *     HRESULT (*GetDevToolsProtocolEventReceiver)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2DevToolsProtocolEventReceiver **) __attribute__((stdcall));
 *     HRESULT (*Stop)(ICoreWebView2_22 *) __attribute__((stdcall));
 *     HRESULT (*add_NewWindowRequested)(ICoreWebView2_22 *, ICoreWebView2NewWindowRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_NewWindowRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_DocumentTitleChanged)(ICoreWebView2_22 *, ICoreWebView2DocumentTitleChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_DocumentTitleChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*get_DocumentTitle)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall));
 *     HRESULT (*AddHostObjectToScript)(ICoreWebView2_22 *, LPCWSTR, VARIANT *) __attribute__((stdcall));
 *     HRESULT (*RemoveHostObjectFromScript)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*OpenDevToolsWindow)(ICoreWebView2_22 *) __attribute__((stdcall));
 *     HRESULT (*add_ContainsFullScreenElementChanged)(ICoreWebView2_22 *, ICoreWebView2ContainsFullScreenElementChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_ContainsFullScreenElementChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*get_ContainsFullScreenElement)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*add_WebResourceRequested)(ICoreWebView2_22 *, ICoreWebView2WebResourceRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_WebResourceRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*AddWebResourceRequestedFilter)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT) __attribute__((stdcall));
 *     HRESULT (*RemoveWebResourceRequestedFilter)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT) __attribute__((stdcall));
 *     HRESULT (*add_WindowCloseRequested)(ICoreWebView2_22 *, ICoreWebView2WindowCloseRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_WindowCloseRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_WebResourceResponseReceived)(ICoreWebView2_22 *, ICoreWebView2WebResourceResponseReceivedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_WebResourceResponseReceived)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*NavigateWithWebResourceRequest)(ICoreWebView2_22 *, ICoreWebView2WebResourceRequest *) __attribute__((stdcall));
 *     HRESULT (*add_DOMContentLoaded)(ICoreWebView2_22 *, ICoreWebView2DOMContentLoadedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_DOMContentLoaded)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*get_CookieManager)(ICoreWebView2_22 *, ICoreWebView2CookieManager **) __attribute__((stdcall));
 *     HRESULT (*get_Environment)(ICoreWebView2_22 *, ICoreWebView2Environment **) __attribute__((stdcall));
 *     HRESULT (*TrySuspend)(ICoreWebView2_22 *, ICoreWebView2TrySuspendCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*Resume)(ICoreWebView2_22 *) __attribute__((stdcall));
 *     HRESULT (*get_IsSuspended)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*SetVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND) __attribute__((stdcall));
 *     HRESULT (*ClearVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*add_FrameCreated)(ICoreWebView2_22 *, ICoreWebView2FrameCreatedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_FrameCreated)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_DownloadStarting)(ICoreWebView2_22 *, ICoreWebView2DownloadStartingEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_DownloadStarting)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_ClientCertificateRequested)(ICoreWebView2_22 *, ICoreWebView2ClientCertificateRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_ClientCertificateRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*OpenTaskManagerWindow)(ICoreWebView2_22 *) __attribute__((stdcall));
 *     HRESULT (*PrintToPdf)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*add_IsMutedChanged)(ICoreWebView2_22 *, ICoreWebView2IsMutedChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_IsMutedChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*get_IsMuted)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_IsMuted)(ICoreWebView2_22 *, BOOL) __attribute__((stdcall));
 *     HRESULT (*add_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, ICoreWebView2IsDocumentPlayingAudioChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*get_IsDocumentPlayingAudio)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*add_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*get_IsDefaultDownloadDialogOpen)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*OpenDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall));
 *     HRESULT (*CloseDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall));
 *     HRESULT (*get_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT *) __attribute__((stdcall));
 *     HRESULT (*put_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT) __attribute__((stdcall));
 *     HRESULT (*get_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT *) __attribute__((stdcall));
 *     HRESULT (*put_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT) __attribute__((stdcall));
 *     HRESULT (*add_BasicAuthenticationRequested)(ICoreWebView2_22 *, ICoreWebView2BasicAuthenticationRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_BasicAuthenticationRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*CallDevToolsProtocolMethodForSession)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, LPCWSTR, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*add_ContextMenuRequested)(ICoreWebView2_22 *, ICoreWebView2ContextMenuRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_ContextMenuRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*add_StatusBarTextChanged)(ICoreWebView2_22 *, ICoreWebView2StatusBarTextChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_StatusBarTextChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*get_StatusBarText)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall));
 *     HRESULT (*get_Profile)(ICoreWebView2_22 *, ICoreWebView2Profile **) __attribute__((stdcall));
 *     HRESULT (*add_ServerCertificateErrorDetected)(ICoreWebView2_22 *, ICoreWebView2ServerCertificateErrorDetectedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_ServerCertificateErrorDetected)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*ClearServerCertificateErrorActions)(ICoreWebView2_22 *, ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*add_FaviconChanged)(ICoreWebView2_22 *, ICoreWebView2FaviconChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_FaviconChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*get_FaviconUri)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall));
 *     HRESULT (*GetFavicon)(ICoreWebView2_22 *, COREWEBVIEW2_FAVICON_IMAGE_FORMAT, ICoreWebView2GetFaviconCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*Print)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*ShowPrintUI)(ICoreWebView2_22 *, COREWEBVIEW2_PRINT_DIALOG_KIND) __attribute__((stdcall));
 *     HRESULT (*PrintToPdfStream)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfStreamCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*PostSharedBufferToScript)(ICoreWebView2_22 *, ICoreWebView2SharedBuffer *, COREWEBVIEW2_SHARED_BUFFER_ACCESS, LPCWSTR) __attribute__((stdcall));
 *     HRESULT (*add_LaunchingExternalUriScheme)(ICoreWebView2_22 *, ICoreWebView2LaunchingExternalUriSchemeEventHandler *, EventRegistrationToken *) __attribute__((stdcall));
 *     HRESULT (*remove_LaunchingExternalUriScheme)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall));
 *     HRESULT (*get_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL *) __attribute__((stdcall));
 *     HRESULT (*put_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL) __attribute__((stdcall));
 *     HRESULT (*get_FrameId)(ICoreWebView2_22 *, UINT32 *) __attribute__((stdcall));
 *     HRESULT (*ExecuteScriptWithResult)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2ExecuteScriptWithResultCompletedHandler *) __attribute__((stdcall));
 *     HRESULT (*AddWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall));
 *     HRESULT (*RemoveWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall));
 * }
 *}
 */
public class ICoreWebView2_22Vtbl extends ICoreWebView2Vtbl {
	
	ICoreWebView2_22Vtbl() {
		// Should not be called directly
	}
	
	private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
			Windows.C_POINTER.withName("QueryInterface"),
			Windows.C_POINTER.withName("AddRef"),
			Windows.C_POINTER.withName("Release"),
			Windows.C_POINTER.withName("get_Settings"),
			Windows.C_POINTER.withName("get_Source"),
			Windows.C_POINTER.withName("Navigate"),
			Windows.C_POINTER.withName("NavigateToString"),
			Windows.C_POINTER.withName("add_NavigationStarting"),
			Windows.C_POINTER.withName("remove_NavigationStarting"),
			Windows.C_POINTER.withName("add_ContentLoading"),
			Windows.C_POINTER.withName("remove_ContentLoading"),
			Windows.C_POINTER.withName("add_SourceChanged"),
			Windows.C_POINTER.withName("remove_SourceChanged"),
			Windows.C_POINTER.withName("add_HistoryChanged"),
			Windows.C_POINTER.withName("remove_HistoryChanged"),
			Windows.C_POINTER.withName("add_NavigationCompleted"),
			Windows.C_POINTER.withName("remove_NavigationCompleted"),
			Windows.C_POINTER.withName("add_FrameNavigationStarting"),
			Windows.C_POINTER.withName("remove_FrameNavigationStarting"),
			Windows.C_POINTER.withName("add_FrameNavigationCompleted"),
			Windows.C_POINTER.withName("remove_FrameNavigationCompleted"),
			Windows.C_POINTER.withName("add_ScriptDialogOpening"),
			Windows.C_POINTER.withName("remove_ScriptDialogOpening"),
			Windows.C_POINTER.withName("add_PermissionRequested"),
			Windows.C_POINTER.withName("remove_PermissionRequested"),
			Windows.C_POINTER.withName("add_ProcessFailed"),
			Windows.C_POINTER.withName("remove_ProcessFailed"),
			Windows.C_POINTER.withName("AddScriptToExecuteOnDocumentCreated"),
			Windows.C_POINTER.withName("RemoveScriptToExecuteOnDocumentCreated"),
			Windows.C_POINTER.withName("ExecuteScript"),
			Windows.C_POINTER.withName("CapturePreview"),
			Windows.C_POINTER.withName("Reload"),
			Windows.C_POINTER.withName("PostWebMessageAsJson"),
			Windows.C_POINTER.withName("PostWebMessageAsString"),
			Windows.C_POINTER.withName("add_WebMessageReceived"),
			Windows.C_POINTER.withName("remove_WebMessageReceived"),
			Windows.C_POINTER.withName("CallDevToolsProtocolMethod"),
			Windows.C_POINTER.withName("get_BrowserProcessId"),
			Windows.C_POINTER.withName("get_CanGoBack"),
			Windows.C_POINTER.withName("get_CanGoForward"),
			Windows.C_POINTER.withName("GoBack"),
			Windows.C_POINTER.withName("GoForward"),
			Windows.C_POINTER.withName("GetDevToolsProtocolEventReceiver"),
			Windows.C_POINTER.withName("Stop"),
			Windows.C_POINTER.withName("add_NewWindowRequested"),
			Windows.C_POINTER.withName("remove_NewWindowRequested"),
			Windows.C_POINTER.withName("add_DocumentTitleChanged"),
			Windows.C_POINTER.withName("remove_DocumentTitleChanged"),
			Windows.C_POINTER.withName("get_DocumentTitle"),
			Windows.C_POINTER.withName("AddHostObjectToScript"),
			Windows.C_POINTER.withName("RemoveHostObjectFromScript"),
			Windows.C_POINTER.withName("OpenDevToolsWindow"),
			Windows.C_POINTER.withName("add_ContainsFullScreenElementChanged"),
			Windows.C_POINTER.withName("remove_ContainsFullScreenElementChanged"),
			Windows.C_POINTER.withName("get_ContainsFullScreenElement"),
			Windows.C_POINTER.withName("add_WebResourceRequested"),
			Windows.C_POINTER.withName("remove_WebResourceRequested"),
			Windows.C_POINTER.withName("AddWebResourceRequestedFilter"),
			Windows.C_POINTER.withName("RemoveWebResourceRequestedFilter"),
			Windows.C_POINTER.withName("add_WindowCloseRequested"),
			Windows.C_POINTER.withName("remove_WindowCloseRequested"),
			Windows.C_POINTER.withName("add_WebResourceResponseReceived"),
			Windows.C_POINTER.withName("remove_WebResourceResponseReceived"),
			Windows.C_POINTER.withName("NavigateWithWebResourceRequest"),
			Windows.C_POINTER.withName("add_DOMContentLoaded"),
			Windows.C_POINTER.withName("remove_DOMContentLoaded"),
			Windows.C_POINTER.withName("get_CookieManager"),
			Windows.C_POINTER.withName("get_Environment"),
			Windows.C_POINTER.withName("TrySuspend"),
			Windows.C_POINTER.withName("Resume"),
			Windows.C_POINTER.withName("get_IsSuspended"),
			Windows.C_POINTER.withName("SetVirtualHostNameToFolderMapping"),
			Windows.C_POINTER.withName("ClearVirtualHostNameToFolderMapping"),
			Windows.C_POINTER.withName("add_FrameCreated"),
			Windows.C_POINTER.withName("remove_FrameCreated"),
			Windows.C_POINTER.withName("add_DownloadStarting"),
			Windows.C_POINTER.withName("remove_DownloadStarting"),
			Windows.C_POINTER.withName("add_ClientCertificateRequested"),
			Windows.C_POINTER.withName("remove_ClientCertificateRequested"),
			Windows.C_POINTER.withName("OpenTaskManagerWindow"),
			Windows.C_POINTER.withName("PrintToPdf"),
			Windows.C_POINTER.withName("add_IsMutedChanged"),
			Windows.C_POINTER.withName("remove_IsMutedChanged"),
			Windows.C_POINTER.withName("get_IsMuted"),
			Windows.C_POINTER.withName("put_IsMuted"),
			Windows.C_POINTER.withName("add_IsDocumentPlayingAudioChanged"),
			Windows.C_POINTER.withName("remove_IsDocumentPlayingAudioChanged"),
			Windows.C_POINTER.withName("get_IsDocumentPlayingAudio"),
			Windows.C_POINTER.withName("add_IsDefaultDownloadDialogOpenChanged"),
			Windows.C_POINTER.withName("remove_IsDefaultDownloadDialogOpenChanged"),
			Windows.C_POINTER.withName("get_IsDefaultDownloadDialogOpen"),
			Windows.C_POINTER.withName("OpenDefaultDownloadDialog"),
			Windows.C_POINTER.withName("CloseDefaultDownloadDialog"),
			Windows.C_POINTER.withName("get_DefaultDownloadDialogCornerAlignment"),
			Windows.C_POINTER.withName("put_DefaultDownloadDialogCornerAlignment"),
			Windows.C_POINTER.withName("get_DefaultDownloadDialogMargin"),
			Windows.C_POINTER.withName("put_DefaultDownloadDialogMargin"),
			Windows.C_POINTER.withName("add_BasicAuthenticationRequested"),
			Windows.C_POINTER.withName("remove_BasicAuthenticationRequested"),
			Windows.C_POINTER.withName("CallDevToolsProtocolMethodForSession"),
			Windows.C_POINTER.withName("add_ContextMenuRequested"),
			Windows.C_POINTER.withName("remove_ContextMenuRequested"),
			Windows.C_POINTER.withName("add_StatusBarTextChanged"),
			Windows.C_POINTER.withName("remove_StatusBarTextChanged"),
			Windows.C_POINTER.withName("get_StatusBarText"),
			Windows.C_POINTER.withName("get_Profile"),
			Windows.C_POINTER.withName("add_ServerCertificateErrorDetected"),
			Windows.C_POINTER.withName("remove_ServerCertificateErrorDetected"),
			Windows.C_POINTER.withName("ClearServerCertificateErrorActions"),
			Windows.C_POINTER.withName("add_FaviconChanged"),
			Windows.C_POINTER.withName("remove_FaviconChanged"),
			Windows.C_POINTER.withName("get_FaviconUri"),
			Windows.C_POINTER.withName("GetFavicon"),
			Windows.C_POINTER.withName("Print"),
			Windows.C_POINTER.withName("ShowPrintUI"),
			Windows.C_POINTER.withName("PrintToPdfStream"),
			Windows.C_POINTER.withName("PostSharedBufferToScript"),
			Windows.C_POINTER.withName("add_LaunchingExternalUriScheme"),
			Windows.C_POINTER.withName("remove_LaunchingExternalUriScheme"),
			Windows.C_POINTER.withName("get_MemoryUsageTargetLevel"),
			Windows.C_POINTER.withName("put_MemoryUsageTargetLevel"),
			Windows.C_POINTER.withName("get_FrameId"),
			Windows.C_POINTER.withName("ExecuteScriptWithResult"),
			Windows.C_POINTER.withName("AddWebResourceRequestedFilterWithRequestSourceKinds"),
			Windows.C_POINTER.withName("RemoveWebResourceRequestedFilterWithRequestSourceKinds")
	).withName("ICoreWebView2_22Vtbl");
	
	/**
	 * The layout of this struct
	 */
	public static GroupLayout layout() {
		return $LAYOUT;
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_WebResourceResponseReceived)(ICoreWebView2_22 *, ICoreWebView2WebResourceResponseReceivedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_WebResourceResponseReceived {
		
		add_WebResourceResponseReceived() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_WebResourceResponseReceived.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_WebResourceResponseReceived.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_WebResourceResponseReceived$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_WebResourceResponseReceived"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_WebResourceResponseReceived)(ICoreWebView2_22 *, ICoreWebView2WebResourceResponseReceivedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_WebResourceResponseReceived$layout() {
		return add_WebResourceResponseReceived$LAYOUT;
	}
	
	private static final long add_WebResourceResponseReceived$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_WebResourceResponseReceived"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_WebResourceResponseReceived)(ICoreWebView2_22 *, ICoreWebView2WebResourceResponseReceivedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_WebResourceResponseReceived$offset() {
		return add_WebResourceResponseReceived$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_WebResourceResponseReceived)(ICoreWebView2_22 *, ICoreWebView2WebResourceResponseReceivedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_WebResourceResponseReceived(MemorySegment struct) {
		return struct.get(add_WebResourceResponseReceived$LAYOUT, add_WebResourceResponseReceived$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_WebResourceResponseReceived)(ICoreWebView2_22 *, ICoreWebView2WebResourceResponseReceivedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_WebResourceResponseReceived(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_WebResourceResponseReceived$LAYOUT, add_WebResourceResponseReceived$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_WebResourceResponseReceived)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_WebResourceResponseReceived {
		
		remove_WebResourceResponseReceived() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_WebResourceResponseReceived.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_WebResourceResponseReceived.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_WebResourceResponseReceived$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_WebResourceResponseReceived"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_WebResourceResponseReceived)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_WebResourceResponseReceived$layout() {
		return remove_WebResourceResponseReceived$LAYOUT;
	}
	
	private static final long remove_WebResourceResponseReceived$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_WebResourceResponseReceived"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_WebResourceResponseReceived)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_WebResourceResponseReceived$offset() {
		return remove_WebResourceResponseReceived$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_WebResourceResponseReceived)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_WebResourceResponseReceived(MemorySegment struct) {
		return struct.get(remove_WebResourceResponseReceived$LAYOUT, remove_WebResourceResponseReceived$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_WebResourceResponseReceived)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_WebResourceResponseReceived(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_WebResourceResponseReceived$LAYOUT, remove_WebResourceResponseReceived$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*NavigateWithWebResourceRequest)(ICoreWebView2_22 *, ICoreWebView2WebResourceRequest *) __attribute__((stdcall))
	 *}
	 */
	public static class NavigateWithWebResourceRequest {
		
		NavigateWithWebResourceRequest() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(NavigateWithWebResourceRequest.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(NavigateWithWebResourceRequest.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout NavigateWithWebResourceRequest$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("NavigateWithWebResourceRequest"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*NavigateWithWebResourceRequest)(ICoreWebView2_22 *, ICoreWebView2WebResourceRequest *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout NavigateWithWebResourceRequest$layout() {
		return NavigateWithWebResourceRequest$LAYOUT;
	}
	
	private static final long NavigateWithWebResourceRequest$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("NavigateWithWebResourceRequest"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*NavigateWithWebResourceRequest)(ICoreWebView2_22 *, ICoreWebView2WebResourceRequest *) __attribute__((stdcall))
	 *}
	 */
	public static long NavigateWithWebResourceRequest$offset() {
		return NavigateWithWebResourceRequest$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*NavigateWithWebResourceRequest)(ICoreWebView2_22 *, ICoreWebView2WebResourceRequest *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment NavigateWithWebResourceRequest(MemorySegment struct) {
		return struct.get(NavigateWithWebResourceRequest$LAYOUT, NavigateWithWebResourceRequest$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*NavigateWithWebResourceRequest)(ICoreWebView2_22 *, ICoreWebView2WebResourceRequest *) __attribute__((stdcall))
	 *}
	 */
	public static void NavigateWithWebResourceRequest(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(NavigateWithWebResourceRequest$LAYOUT, NavigateWithWebResourceRequest$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_DOMContentLoaded)(ICoreWebView2_22 *, ICoreWebView2DOMContentLoadedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_DOMContentLoaded {
		
		add_DOMContentLoaded() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_DOMContentLoaded.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_DOMContentLoaded.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_DOMContentLoaded$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_DOMContentLoaded"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_DOMContentLoaded)(ICoreWebView2_22 *, ICoreWebView2DOMContentLoadedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_DOMContentLoaded$layout() {
		return add_DOMContentLoaded$LAYOUT;
	}
	
	private static final long add_DOMContentLoaded$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_DOMContentLoaded"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_DOMContentLoaded)(ICoreWebView2_22 *, ICoreWebView2DOMContentLoadedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_DOMContentLoaded$offset() {
		return add_DOMContentLoaded$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_DOMContentLoaded)(ICoreWebView2_22 *, ICoreWebView2DOMContentLoadedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_DOMContentLoaded(MemorySegment struct) {
		return struct.get(add_DOMContentLoaded$LAYOUT, add_DOMContentLoaded$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_DOMContentLoaded)(ICoreWebView2_22 *, ICoreWebView2DOMContentLoadedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_DOMContentLoaded(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_DOMContentLoaded$LAYOUT, add_DOMContentLoaded$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_DOMContentLoaded)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_DOMContentLoaded {
		
		remove_DOMContentLoaded() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_DOMContentLoaded.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_DOMContentLoaded.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_DOMContentLoaded$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_DOMContentLoaded"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_DOMContentLoaded)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_DOMContentLoaded$layout() {
		return remove_DOMContentLoaded$LAYOUT;
	}
	
	private static final long remove_DOMContentLoaded$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_DOMContentLoaded"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_DOMContentLoaded)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_DOMContentLoaded$offset() {
		return remove_DOMContentLoaded$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_DOMContentLoaded)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_DOMContentLoaded(MemorySegment struct) {
		return struct.get(remove_DOMContentLoaded$LAYOUT, remove_DOMContentLoaded$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_DOMContentLoaded)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_DOMContentLoaded(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_DOMContentLoaded$LAYOUT, remove_DOMContentLoaded$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_CookieManager)(ICoreWebView2_22 *, ICoreWebView2CookieManager **) __attribute__((stdcall))
	 *}
	 */
	public static class get_CookieManager {
		
		get_CookieManager() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_CookieManager.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_CookieManager.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_CookieManager$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_CookieManager"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_CookieManager)(ICoreWebView2_22 *, ICoreWebView2CookieManager **) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_CookieManager$layout() {
		return get_CookieManager$LAYOUT;
	}
	
	private static final long get_CookieManager$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_CookieManager"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_CookieManager)(ICoreWebView2_22 *, ICoreWebView2CookieManager **) __attribute__((stdcall))
	 *}
	 */
	public static long get_CookieManager$offset() {
		return get_CookieManager$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_CookieManager)(ICoreWebView2_22 *, ICoreWebView2CookieManager **) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_CookieManager(MemorySegment struct) {
		return struct.get(get_CookieManager$LAYOUT, get_CookieManager$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_CookieManager)(ICoreWebView2_22 *, ICoreWebView2CookieManager **) __attribute__((stdcall))
	 *}
	 */
	public static void get_CookieManager(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_CookieManager$LAYOUT, get_CookieManager$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_Environment)(ICoreWebView2_22 *, ICoreWebView2Environment **) __attribute__((stdcall))
	 *}
	 */
	public static class get_Environment {
		
		get_Environment() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_Environment.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_Environment.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_Environment$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_Environment"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_Environment)(ICoreWebView2_22 *, ICoreWebView2Environment **) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_Environment$layout() {
		return get_Environment$LAYOUT;
	}
	
	private static final long get_Environment$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_Environment"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_Environment)(ICoreWebView2_22 *, ICoreWebView2Environment **) __attribute__((stdcall))
	 *}
	 */
	public static long get_Environment$offset() {
		return get_Environment$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_Environment)(ICoreWebView2_22 *, ICoreWebView2Environment **) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_Environment(MemorySegment struct) {
		return struct.get(get_Environment$LAYOUT, get_Environment$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_Environment)(ICoreWebView2_22 *, ICoreWebView2Environment **) __attribute__((stdcall))
	 *}
	 */
	public static void get_Environment(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_Environment$LAYOUT, get_Environment$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*TrySuspend)(ICoreWebView2_22 *, ICoreWebView2TrySuspendCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static class TrySuspend {
		
		TrySuspend() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(TrySuspend.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(TrySuspend.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout TrySuspend$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("TrySuspend"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*TrySuspend)(ICoreWebView2_22 *, ICoreWebView2TrySuspendCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout TrySuspend$layout() {
		return TrySuspend$LAYOUT;
	}
	
	private static final long TrySuspend$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("TrySuspend"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*TrySuspend)(ICoreWebView2_22 *, ICoreWebView2TrySuspendCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static long TrySuspend$offset() {
		return TrySuspend$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*TrySuspend)(ICoreWebView2_22 *, ICoreWebView2TrySuspendCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment TrySuspend(MemorySegment struct) {
		return struct.get(TrySuspend$LAYOUT, TrySuspend$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*TrySuspend)(ICoreWebView2_22 *, ICoreWebView2TrySuspendCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static void TrySuspend(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(TrySuspend$LAYOUT, TrySuspend$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*Resume)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static class Resume {
		
		Resume() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(Resume.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(Resume.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout Resume$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("Resume"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*Resume)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout Resume$layout() {
		return Resume$LAYOUT;
	}
	
	private static final long Resume$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("Resume"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*Resume)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static long Resume$offset() {
		return Resume$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*Resume)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment Resume(MemorySegment struct) {
		return struct.get(Resume$LAYOUT, Resume$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*Resume)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static void Resume(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(Resume$LAYOUT, Resume$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_IsSuspended)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_IsSuspended {
		
		get_IsSuspended() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_IsSuspended.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_IsSuspended.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_IsSuspended$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_IsSuspended"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsSuspended)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_IsSuspended$layout() {
		return get_IsSuspended$LAYOUT;
	}
	
	private static final long get_IsSuspended$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_IsSuspended"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsSuspended)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_IsSuspended$offset() {
		return get_IsSuspended$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsSuspended)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_IsSuspended(MemorySegment struct) {
		return struct.get(get_IsSuspended$LAYOUT, get_IsSuspended$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsSuspended)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_IsSuspended(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_IsSuspended$LAYOUT, get_IsSuspended$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*SetVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND) __attribute__((stdcall))
	 *}
	 */
	public static class SetVirtualHostNameToFolderMapping {
		
		SetVirtualHostNameToFolderMapping() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_INT
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(SetVirtualHostNameToFolderMapping.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(SetVirtualHostNameToFolderMapping.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, int _x3) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout SetVirtualHostNameToFolderMapping$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("SetVirtualHostNameToFolderMapping"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*SetVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout SetVirtualHostNameToFolderMapping$layout() {
		return SetVirtualHostNameToFolderMapping$LAYOUT;
	}
	
	private static final long SetVirtualHostNameToFolderMapping$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("SetVirtualHostNameToFolderMapping"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*SetVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND) __attribute__((stdcall))
	 *}
	 */
	public static final long SetVirtualHostNameToFolderMapping$offset() {
		return SetVirtualHostNameToFolderMapping$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*SetVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment SetVirtualHostNameToFolderMapping(MemorySegment struct) {
		return struct.get(SetVirtualHostNameToFolderMapping$LAYOUT, SetVirtualHostNameToFolderMapping$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*SetVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, COREWEBVIEW2_HOST_RESOURCE_ACCESS_KIND) __attribute__((stdcall))
	 *}
	 */
	public static void SetVirtualHostNameToFolderMapping(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(SetVirtualHostNameToFolderMapping$LAYOUT, SetVirtualHostNameToFolderMapping$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*ClearVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall))
	 *}
	 */
	public static class ClearVirtualHostNameToFolderMapping {
		
		ClearVirtualHostNameToFolderMapping() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(ClearVirtualHostNameToFolderMapping.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(ClearVirtualHostNameToFolderMapping.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout ClearVirtualHostNameToFolderMapping$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("ClearVirtualHostNameToFolderMapping"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*ClearVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout ClearVirtualHostNameToFolderMapping$layout() {
		return ClearVirtualHostNameToFolderMapping$LAYOUT;
	}
	
	private static final long ClearVirtualHostNameToFolderMapping$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("ClearVirtualHostNameToFolderMapping"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*ClearVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall))
	 *}
	 */
	public static long ClearVirtualHostNameToFolderMapping$offset() {
		return ClearVirtualHostNameToFolderMapping$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*ClearVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment ClearVirtualHostNameToFolderMapping(MemorySegment struct) {
		return struct.get(ClearVirtualHostNameToFolderMapping$LAYOUT, ClearVirtualHostNameToFolderMapping$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*ClearVirtualHostNameToFolderMapping)(ICoreWebView2_22 *, LPCWSTR) __attribute__((stdcall))
	 *}
	 */
	public static void ClearVirtualHostNameToFolderMapping(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(ClearVirtualHostNameToFolderMapping$LAYOUT, ClearVirtualHostNameToFolderMapping$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_FrameCreated)(ICoreWebView2_22 *, ICoreWebView2FrameCreatedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_FrameCreated {
		
		add_FrameCreated() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_FrameCreated.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_FrameCreated.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_FrameCreated$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_FrameCreated"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_FrameCreated)(ICoreWebView2_22 *, ICoreWebView2FrameCreatedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_FrameCreated$layout() {
		return add_FrameCreated$LAYOUT;
	}
	
	private static final long add_FrameCreated$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_FrameCreated"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_FrameCreated)(ICoreWebView2_22 *, ICoreWebView2FrameCreatedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_FrameCreated$offset() {
		return add_FrameCreated$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_FrameCreated)(ICoreWebView2_22 *, ICoreWebView2FrameCreatedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_FrameCreated(MemorySegment struct) {
		return struct.get(add_FrameCreated$LAYOUT, add_FrameCreated$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_FrameCreated)(ICoreWebView2_22 *, ICoreWebView2FrameCreatedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_FrameCreated(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_FrameCreated$LAYOUT, add_FrameCreated$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_FrameCreated)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_FrameCreated {
		
		remove_FrameCreated() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_FrameCreated.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_FrameCreated.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_FrameCreated$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_FrameCreated"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_FrameCreated)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_FrameCreated$layout() {
		return remove_FrameCreated$LAYOUT;
	}
	
	private static final long remove_FrameCreated$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_FrameCreated"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_FrameCreated)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_FrameCreated$offset() {
		return remove_FrameCreated$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_FrameCreated)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_FrameCreated(MemorySegment struct) {
		return struct.get(remove_FrameCreated$LAYOUT, remove_FrameCreated$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_FrameCreated)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_FrameCreated(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_FrameCreated$LAYOUT, remove_FrameCreated$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_DownloadStarting)(ICoreWebView2_22 *, ICoreWebView2DownloadStartingEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_DownloadStarting {
		
		add_DownloadStarting() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_DownloadStarting.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_DownloadStarting.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_DownloadStarting$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_DownloadStarting"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_DownloadStarting)(ICoreWebView2_22 *, ICoreWebView2DownloadStartingEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_DownloadStarting$layout() {
		return add_DownloadStarting$LAYOUT;
	}
	
	private static final long add_DownloadStarting$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_DownloadStarting"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_DownloadStarting)(ICoreWebView2_22 *, ICoreWebView2DownloadStartingEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_DownloadStarting$offset() {
		return add_DownloadStarting$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_DownloadStarting)(ICoreWebView2_22 *, ICoreWebView2DownloadStartingEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_DownloadStarting(MemorySegment struct) {
		return struct.get(add_DownloadStarting$LAYOUT, add_DownloadStarting$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_DownloadStarting)(ICoreWebView2_22 *, ICoreWebView2DownloadStartingEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_DownloadStarting(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_DownloadStarting$LAYOUT, add_DownloadStarting$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_DownloadStarting)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_DownloadStarting {
		
		remove_DownloadStarting() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_DownloadStarting.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_DownloadStarting.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_DownloadStarting$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_DownloadStarting"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_DownloadStarting)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_DownloadStarting$layout() {
		return remove_DownloadStarting$LAYOUT;
	}
	
	private static final long remove_DownloadStarting$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_DownloadStarting"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_DownloadStarting)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_DownloadStarting$offset() {
		return remove_DownloadStarting$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_DownloadStarting)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_DownloadStarting(MemorySegment struct) {
		return struct.get(remove_DownloadStarting$LAYOUT, remove_DownloadStarting$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_DownloadStarting)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_DownloadStarting(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_DownloadStarting$LAYOUT, remove_DownloadStarting$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_ClientCertificateRequested)(ICoreWebView2_22 *, ICoreWebView2ClientCertificateRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_ClientCertificateRequested {
		
		add_ClientCertificateRequested() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_ClientCertificateRequested.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_ClientCertificateRequested.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_ClientCertificateRequested$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_ClientCertificateRequested"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ClientCertificateRequested)(ICoreWebView2_22 *, ICoreWebView2ClientCertificateRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_ClientCertificateRequested$layout() {
		return add_ClientCertificateRequested$LAYOUT;
	}
	
	private static final long add_ClientCertificateRequested$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_ClientCertificateRequested"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ClientCertificateRequested)(ICoreWebView2_22 *, ICoreWebView2ClientCertificateRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_ClientCertificateRequested$offset() {
		return add_ClientCertificateRequested$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ClientCertificateRequested)(ICoreWebView2_22 *, ICoreWebView2ClientCertificateRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_ClientCertificateRequested(MemorySegment struct) {
		return struct.get(add_ClientCertificateRequested$LAYOUT, add_ClientCertificateRequested$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ClientCertificateRequested)(ICoreWebView2_22 *, ICoreWebView2ClientCertificateRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_ClientCertificateRequested(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_ClientCertificateRequested$LAYOUT, add_ClientCertificateRequested$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_ClientCertificateRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_ClientCertificateRequested {
		
		remove_ClientCertificateRequested() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_ClientCertificateRequested.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_ClientCertificateRequested.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_ClientCertificateRequested$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_ClientCertificateRequested"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ClientCertificateRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_ClientCertificateRequested$layout() {
		return remove_ClientCertificateRequested$LAYOUT;
	}
	
	private static final long remove_ClientCertificateRequested$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_ClientCertificateRequested"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ClientCertificateRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_ClientCertificateRequested$offset() {
		return remove_ClientCertificateRequested$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ClientCertificateRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_ClientCertificateRequested(MemorySegment struct) {
		return struct.get(remove_ClientCertificateRequested$LAYOUT, remove_ClientCertificateRequested$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ClientCertificateRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_ClientCertificateRequested(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_ClientCertificateRequested$LAYOUT, remove_ClientCertificateRequested$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*OpenTaskManagerWindow)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static class OpenTaskManagerWindow {
		
		OpenTaskManagerWindow() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(OpenTaskManagerWindow.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(OpenTaskManagerWindow.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout OpenTaskManagerWindow$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("OpenTaskManagerWindow"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*OpenTaskManagerWindow)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout OpenTaskManagerWindow$layout() {
		return OpenTaskManagerWindow$LAYOUT;
	}
	
	private static final long OpenTaskManagerWindow$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("OpenTaskManagerWindow"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*OpenTaskManagerWindow)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static long OpenTaskManagerWindow$offset() {
		return OpenTaskManagerWindow$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*OpenTaskManagerWindow)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment OpenTaskManagerWindow(MemorySegment struct) {
		return struct.get(OpenTaskManagerWindow$LAYOUT, OpenTaskManagerWindow$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*OpenTaskManagerWindow)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static void OpenTaskManagerWindow(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(OpenTaskManagerWindow$LAYOUT, OpenTaskManagerWindow$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*PrintToPdf)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static class PrintToPdf {
		
		PrintToPdf() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(PrintToPdf.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(PrintToPdf.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout PrintToPdf$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("PrintToPdf"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*PrintToPdf)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout PrintToPdf$layout() {
		return PrintToPdf$LAYOUT;
	}
	
	private static final long PrintToPdf$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("PrintToPdf"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*PrintToPdf)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static long PrintToPdf$offset() {
		return PrintToPdf$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*PrintToPdf)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment PrintToPdf(MemorySegment struct) {
		return struct.get(PrintToPdf$LAYOUT, PrintToPdf$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*PrintToPdf)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static void PrintToPdf(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(PrintToPdf$LAYOUT, PrintToPdf$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_IsMutedChanged)(ICoreWebView2_22 *, ICoreWebView2IsMutedChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_IsMutedChanged {
		
		add_IsMutedChanged() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_IsMutedChanged.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_IsMutedChanged.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_IsMutedChanged$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_IsMutedChanged"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsMutedChanged)(ICoreWebView2_22 *, ICoreWebView2IsMutedChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_IsMutedChanged$layout() {
		return add_IsMutedChanged$LAYOUT;
	}
	
	private static final long add_IsMutedChanged$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_IsMutedChanged"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsMutedChanged)(ICoreWebView2_22 *, ICoreWebView2IsMutedChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_IsMutedChanged$offset() {
		return add_IsMutedChanged$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsMutedChanged)(ICoreWebView2_22 *, ICoreWebView2IsMutedChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_IsMutedChanged(MemorySegment struct) {
		return struct.get(add_IsMutedChanged$LAYOUT, add_IsMutedChanged$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsMutedChanged)(ICoreWebView2_22 *, ICoreWebView2IsMutedChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_IsMutedChanged(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_IsMutedChanged$LAYOUT, add_IsMutedChanged$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsMutedChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_IsMutedChanged {
		
		remove_IsMutedChanged() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_IsMutedChanged.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_IsMutedChanged.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_IsMutedChanged$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_IsMutedChanged"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsMutedChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_IsMutedChanged$layout() {
		return remove_IsMutedChanged$LAYOUT;
	}
	
	private static final long remove_IsMutedChanged$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_IsMutedChanged"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsMutedChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_IsMutedChanged$offset() {
		return remove_IsMutedChanged$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsMutedChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_IsMutedChanged(MemorySegment struct) {
		return struct.get(remove_IsMutedChanged$LAYOUT, remove_IsMutedChanged$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsMutedChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_IsMutedChanged(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_IsMutedChanged$LAYOUT, remove_IsMutedChanged$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_IsMuted)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_IsMuted {
		
		get_IsMuted() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_IsMuted.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_IsMuted.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_IsMuted$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_IsMuted"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsMuted)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_IsMuted$layout() {
		return get_IsMuted$LAYOUT;
	}
	
	private static final long get_IsMuted$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_IsMuted"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsMuted)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_IsMuted$offset() {
		return get_IsMuted$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsMuted)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_IsMuted(MemorySegment struct) {
		return struct.get(get_IsMuted$LAYOUT, get_IsMuted$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsMuted)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_IsMuted(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_IsMuted$LAYOUT, get_IsMuted$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_IsMuted)(ICoreWebView2_22 *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static class put_IsMuted {
		
		put_IsMuted() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, int _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_INT
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(put_IsMuted.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_IsMuted.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_IsMuted$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_IsMuted"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsMuted)(ICoreWebView2_22 *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_IsMuted$layout() {
		return put_IsMuted$LAYOUT;
	}
	
	private static final long put_IsMuted$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_IsMuted"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsMuted)(ICoreWebView2_22 *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static long put_IsMuted$offset() {
		return put_IsMuted$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsMuted)(ICoreWebView2_22 *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_IsMuted(MemorySegment struct) {
		return struct.get(put_IsMuted$LAYOUT, put_IsMuted$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsMuted)(ICoreWebView2_22 *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static void put_IsMuted(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_IsMuted$LAYOUT, put_IsMuted$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, ICoreWebView2IsDocumentPlayingAudioChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_IsDocumentPlayingAudioChanged {
		
		add_IsDocumentPlayingAudioChanged() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_IsDocumentPlayingAudioChanged.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_IsDocumentPlayingAudioChanged.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_IsDocumentPlayingAudioChanged$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_IsDocumentPlayingAudioChanged"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, ICoreWebView2IsDocumentPlayingAudioChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_IsDocumentPlayingAudioChanged$layout() {
		return add_IsDocumentPlayingAudioChanged$LAYOUT;
	}
	
	private static final long add_IsDocumentPlayingAudioChanged$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_IsDocumentPlayingAudioChanged"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, ICoreWebView2IsDocumentPlayingAudioChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_IsDocumentPlayingAudioChanged$offset() {
		return add_IsDocumentPlayingAudioChanged$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, ICoreWebView2IsDocumentPlayingAudioChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_IsDocumentPlayingAudioChanged(MemorySegment struct) {
		return struct.get(add_IsDocumentPlayingAudioChanged$LAYOUT, add_IsDocumentPlayingAudioChanged$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, ICoreWebView2IsDocumentPlayingAudioChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_IsDocumentPlayingAudioChanged(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_IsDocumentPlayingAudioChanged$LAYOUT, add_IsDocumentPlayingAudioChanged$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_IsDocumentPlayingAudioChanged {
		
		remove_IsDocumentPlayingAudioChanged() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_IsDocumentPlayingAudioChanged.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_IsDocumentPlayingAudioChanged.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_IsDocumentPlayingAudioChanged$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_IsDocumentPlayingAudioChanged"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_IsDocumentPlayingAudioChanged$layout() {
		return remove_IsDocumentPlayingAudioChanged$LAYOUT;
	}
	
	private static final long remove_IsDocumentPlayingAudioChanged$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_IsDocumentPlayingAudioChanged"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_IsDocumentPlayingAudioChanged$offset() {
		return remove_IsDocumentPlayingAudioChanged$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_IsDocumentPlayingAudioChanged(MemorySegment struct) {
		return struct.get(remove_IsDocumentPlayingAudioChanged$LAYOUT, remove_IsDocumentPlayingAudioChanged$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsDocumentPlayingAudioChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_IsDocumentPlayingAudioChanged(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_IsDocumentPlayingAudioChanged$LAYOUT, remove_IsDocumentPlayingAudioChanged$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_IsDocumentPlayingAudio)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_IsDocumentPlayingAudio {
		
		get_IsDocumentPlayingAudio() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_IsDocumentPlayingAudio.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_IsDocumentPlayingAudio.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_IsDocumentPlayingAudio$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_IsDocumentPlayingAudio"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsDocumentPlayingAudio)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_IsDocumentPlayingAudio$layout() {
		return get_IsDocumentPlayingAudio$LAYOUT;
	}
	
	private static final long get_IsDocumentPlayingAudio$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_IsDocumentPlayingAudio"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsDocumentPlayingAudio)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_IsDocumentPlayingAudio$offset() {
		return get_IsDocumentPlayingAudio$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsDocumentPlayingAudio)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_IsDocumentPlayingAudio(MemorySegment struct) {
		return struct.get(get_IsDocumentPlayingAudio$LAYOUT, get_IsDocumentPlayingAudio$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsDocumentPlayingAudio)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_IsDocumentPlayingAudio(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_IsDocumentPlayingAudio$LAYOUT, get_IsDocumentPlayingAudio$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_IsDefaultDownloadDialogOpenChanged {
		
		add_IsDefaultDownloadDialogOpenChanged() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_IsDefaultDownloadDialogOpenChanged.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_IsDefaultDownloadDialogOpenChanged.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_IsDefaultDownloadDialogOpenChanged$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_IsDefaultDownloadDialogOpenChanged"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_IsDefaultDownloadDialogOpenChanged$layout() {
		return add_IsDefaultDownloadDialogOpenChanged$LAYOUT;
	}
	
	private static final long add_IsDefaultDownloadDialogOpenChanged$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_IsDefaultDownloadDialogOpenChanged"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_IsDefaultDownloadDialogOpenChanged$offset() {
		return add_IsDefaultDownloadDialogOpenChanged$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_IsDefaultDownloadDialogOpenChanged(MemorySegment struct) {
		return struct.get(add_IsDefaultDownloadDialogOpenChanged$LAYOUT, add_IsDefaultDownloadDialogOpenChanged$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, ICoreWebView2IsDefaultDownloadDialogOpenChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_IsDefaultDownloadDialogOpenChanged(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_IsDefaultDownloadDialogOpenChanged$LAYOUT, add_IsDefaultDownloadDialogOpenChanged$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_IsDefaultDownloadDialogOpenChanged {
		
		remove_IsDefaultDownloadDialogOpenChanged() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_IsDefaultDownloadDialogOpenChanged.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_IsDefaultDownloadDialogOpenChanged.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_IsDefaultDownloadDialogOpenChanged$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_IsDefaultDownloadDialogOpenChanged"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_IsDefaultDownloadDialogOpenChanged$layout() {
		return remove_IsDefaultDownloadDialogOpenChanged$LAYOUT;
	}
	
	private static final long remove_IsDefaultDownloadDialogOpenChanged$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_IsDefaultDownloadDialogOpenChanged")); //
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_IsDefaultDownloadDialogOpenChanged$offset() {
		return remove_IsDefaultDownloadDialogOpenChanged$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_IsDefaultDownloadDialogOpenChanged(MemorySegment struct) {
		return struct.get(remove_IsDefaultDownloadDialogOpenChanged$LAYOUT, remove_IsDefaultDownloadDialogOpenChanged$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_IsDefaultDownloadDialogOpenChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_IsDefaultDownloadDialogOpenChanged(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_IsDefaultDownloadDialogOpenChanged$LAYOUT, remove_IsDefaultDownloadDialogOpenChanged$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_IsDefaultDownloadDialogOpen)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_IsDefaultDownloadDialogOpen {
		
		get_IsDefaultDownloadDialogOpen() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_IsDefaultDownloadDialogOpen.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_IsDefaultDownloadDialogOpen.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_IsDefaultDownloadDialogOpen$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_IsDefaultDownloadDialogOpen"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsDefaultDownloadDialogOpen)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_IsDefaultDownloadDialogOpen$layout() {
		return get_IsDefaultDownloadDialogOpen$LAYOUT;
	}
	
	private static final long get_IsDefaultDownloadDialogOpen$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_IsDefaultDownloadDialogOpen"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsDefaultDownloadDialogOpen)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_IsDefaultDownloadDialogOpen$offset() {
		return get_IsDefaultDownloadDialogOpen$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsDefaultDownloadDialogOpen)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_IsDefaultDownloadDialogOpen(MemorySegment struct) {
		return struct.get(get_IsDefaultDownloadDialogOpen$LAYOUT, get_IsDefaultDownloadDialogOpen$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsDefaultDownloadDialogOpen)(ICoreWebView2_22 *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_IsDefaultDownloadDialogOpen(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_IsDefaultDownloadDialogOpen$LAYOUT, get_IsDefaultDownloadDialogOpen$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*OpenDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static class OpenDefaultDownloadDialog {
		
		OpenDefaultDownloadDialog() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(OpenDefaultDownloadDialog.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(OpenDefaultDownloadDialog.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout OpenDefaultDownloadDialog$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("OpenDefaultDownloadDialog"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*OpenDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout OpenDefaultDownloadDialog$layout() {
		return OpenDefaultDownloadDialog$LAYOUT;
	}
	
	private static final long OpenDefaultDownloadDialog$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("OpenDefaultDownloadDialog"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*OpenDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static long OpenDefaultDownloadDialog$offset() {
		return OpenDefaultDownloadDialog$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*OpenDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment OpenDefaultDownloadDialog(MemorySegment struct) {
		return struct.get(OpenDefaultDownloadDialog$LAYOUT, OpenDefaultDownloadDialog$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*OpenDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static void OpenDefaultDownloadDialog(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(OpenDefaultDownloadDialog$LAYOUT, OpenDefaultDownloadDialog$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*CloseDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static class CloseDefaultDownloadDialog {
		
		CloseDefaultDownloadDialog() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(CloseDefaultDownloadDialog.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(CloseDefaultDownloadDialog.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout CloseDefaultDownloadDialog$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("CloseDefaultDownloadDialog"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*CloseDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout CloseDefaultDownloadDialog$layout() {
		return CloseDefaultDownloadDialog$LAYOUT;
	}
	
	private static final long CloseDefaultDownloadDialog$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("CloseDefaultDownloadDialog"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*CloseDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static long CloseDefaultDownloadDialog$offset() {
		return CloseDefaultDownloadDialog$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*CloseDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment CloseDefaultDownloadDialog(MemorySegment struct) {
		return struct.get(CloseDefaultDownloadDialog$LAYOUT, CloseDefaultDownloadDialog$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*CloseDefaultDownloadDialog)(ICoreWebView2_22 *) __attribute__((stdcall))
	 *}
	 */
	public static void CloseDefaultDownloadDialog(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(CloseDefaultDownloadDialog$LAYOUT, CloseDefaultDownloadDialog$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT *) __attribute__((stdcall))
	 *}
	 */
	public static class get_DefaultDownloadDialogCornerAlignment {
		
		get_DefaultDownloadDialogCornerAlignment() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_DefaultDownloadDialogCornerAlignment.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_DefaultDownloadDialogCornerAlignment.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_DefaultDownloadDialogCornerAlignment$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_DefaultDownloadDialogCornerAlignment"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_DefaultDownloadDialogCornerAlignment$layout() {
		return get_DefaultDownloadDialogCornerAlignment$LAYOUT;
	}
	
	private static final long get_DefaultDownloadDialogCornerAlignment$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_DefaultDownloadDialogCornerAlignment"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT *) __attribute__((stdcall))
	 *}
	 */
	public static long get_DefaultDownloadDialogCornerAlignment$offset() {
		return get_DefaultDownloadDialogCornerAlignment$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_DefaultDownloadDialogCornerAlignment(MemorySegment struct) {
		return struct.get(get_DefaultDownloadDialogCornerAlignment$LAYOUT, get_DefaultDownloadDialogCornerAlignment$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT *) __attribute__((stdcall))
	 *}
	 */
	public static void get_DefaultDownloadDialogCornerAlignment(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_DefaultDownloadDialogCornerAlignment$LAYOUT, get_DefaultDownloadDialogCornerAlignment$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT) __attribute__((stdcall))
	 *}
	 */
	public static class put_DefaultDownloadDialogCornerAlignment {
		
		put_DefaultDownloadDialogCornerAlignment() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, int _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_INT
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(put_DefaultDownloadDialogCornerAlignment.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_DefaultDownloadDialogCornerAlignment.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_DefaultDownloadDialogCornerAlignment$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_DefaultDownloadDialogCornerAlignment"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_DefaultDownloadDialogCornerAlignment$layout() {
		return put_DefaultDownloadDialogCornerAlignment$LAYOUT;
	}
	
	private static final long put_DefaultDownloadDialogCornerAlignment$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_DefaultDownloadDialogCornerAlignment"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT) __attribute__((stdcall))
	 *}
	 */
	public static long put_DefaultDownloadDialogCornerAlignment$offset() {
		return put_DefaultDownloadDialogCornerAlignment$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_DefaultDownloadDialogCornerAlignment(MemorySegment struct) {
		return struct.get(put_DefaultDownloadDialogCornerAlignment$LAYOUT, put_DefaultDownloadDialogCornerAlignment$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_DefaultDownloadDialogCornerAlignment)(ICoreWebView2_22 *, COREWEBVIEW2_DEFAULT_DOWNLOAD_DIALOG_CORNER_ALIGNMENT) __attribute__((stdcall))
	 *}
	 */
	public static void put_DefaultDownloadDialogCornerAlignment(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_DefaultDownloadDialogCornerAlignment$LAYOUT, put_DefaultDownloadDialogCornerAlignment$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT *) __attribute__((stdcall))
	 *}
	 */
	public static class get_DefaultDownloadDialogMargin {
		
		get_DefaultDownloadDialogMargin() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_DefaultDownloadDialogMargin.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_DefaultDownloadDialogMargin.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_DefaultDownloadDialogMargin$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_DefaultDownloadDialogMargin"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_DefaultDownloadDialogMargin$layout() {
		return get_DefaultDownloadDialogMargin$LAYOUT;
	}
	
	private static final long get_DefaultDownloadDialogMargin$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_DefaultDownloadDialogMargin"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT *) __attribute__((stdcall))
	 *}
	 */
	public static long get_DefaultDownloadDialogMargin$offset() {
		return get_DefaultDownloadDialogMargin$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_DefaultDownloadDialogMargin(MemorySegment struct) {
		return struct.get(get_DefaultDownloadDialogMargin$LAYOUT, get_DefaultDownloadDialogMargin$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT *) __attribute__((stdcall))
	 *}
	 */
	public static void get_DefaultDownloadDialogMargin(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_DefaultDownloadDialogMargin$LAYOUT, get_DefaultDownloadDialogMargin$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT) __attribute__((stdcall))
	 *}
	 */
	public static class put_DefaultDownloadDialogMargin {
		
		put_DefaultDownloadDialogMargin() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				tagPOINT.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(put_DefaultDownloadDialogMargin.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_DefaultDownloadDialogMargin.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_DefaultDownloadDialogMargin$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_DefaultDownloadDialogMargin"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_DefaultDownloadDialogMargin$layout() {
		return put_DefaultDownloadDialogMargin$LAYOUT;
	}
	
	private static final long put_DefaultDownloadDialogMargin$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_DefaultDownloadDialogMargin"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT) __attribute__((stdcall))
	 *}
	 */
	public static long put_DefaultDownloadDialogMargin$offset() {
		return put_DefaultDownloadDialogMargin$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_DefaultDownloadDialogMargin(MemorySegment struct) {
		return struct.get(put_DefaultDownloadDialogMargin$LAYOUT, put_DefaultDownloadDialogMargin$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_DefaultDownloadDialogMargin)(ICoreWebView2_22 *, POINT) __attribute__((stdcall))
	 *}
	 */
	public static void put_DefaultDownloadDialogMargin(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_DefaultDownloadDialogMargin$LAYOUT, put_DefaultDownloadDialogMargin$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_BasicAuthenticationRequested)(ICoreWebView2_22 *, ICoreWebView2BasicAuthenticationRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_BasicAuthenticationRequested {
		
		add_BasicAuthenticationRequested() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_BasicAuthenticationRequested.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_BasicAuthenticationRequested.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_BasicAuthenticationRequested$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_BasicAuthenticationRequested"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_BasicAuthenticationRequested)(ICoreWebView2_22 *, ICoreWebView2BasicAuthenticationRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static final AddressLayout add_BasicAuthenticationRequested$layout() {
		return add_BasicAuthenticationRequested$LAYOUT;
	}
	
	private static final long add_BasicAuthenticationRequested$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_BasicAuthenticationRequested"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_BasicAuthenticationRequested)(ICoreWebView2_22 *, ICoreWebView2BasicAuthenticationRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_BasicAuthenticationRequested$offset() {
		return add_BasicAuthenticationRequested$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_BasicAuthenticationRequested)(ICoreWebView2_22 *, ICoreWebView2BasicAuthenticationRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_BasicAuthenticationRequested(MemorySegment struct) {
		return struct.get(add_BasicAuthenticationRequested$LAYOUT, add_BasicAuthenticationRequested$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_BasicAuthenticationRequested)(ICoreWebView2_22 *, ICoreWebView2BasicAuthenticationRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_BasicAuthenticationRequested(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_BasicAuthenticationRequested$LAYOUT, add_BasicAuthenticationRequested$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_BasicAuthenticationRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_BasicAuthenticationRequested {
		
		remove_BasicAuthenticationRequested() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_BasicAuthenticationRequested.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_BasicAuthenticationRequested.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_BasicAuthenticationRequested$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_BasicAuthenticationRequested"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_BasicAuthenticationRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_BasicAuthenticationRequested$layout() {
		return remove_BasicAuthenticationRequested$LAYOUT;
	}
	
	private static final long remove_BasicAuthenticationRequested$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_BasicAuthenticationRequested"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_BasicAuthenticationRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_BasicAuthenticationRequested$offset() {
		return remove_BasicAuthenticationRequested$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_BasicAuthenticationRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_BasicAuthenticationRequested(MemorySegment struct) {
		return struct.get(remove_BasicAuthenticationRequested$LAYOUT, remove_BasicAuthenticationRequested$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_BasicAuthenticationRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_BasicAuthenticationRequested(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_BasicAuthenticationRequested$LAYOUT, remove_BasicAuthenticationRequested$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*CallDevToolsProtocolMethodForSession)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, LPCWSTR, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static class CallDevToolsProtocolMethodForSession {
		
		CallDevToolsProtocolMethodForSession() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(CallDevToolsProtocolMethodForSession.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(CallDevToolsProtocolMethodForSession.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3, MemorySegment _x4) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3, _x4);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout CallDevToolsProtocolMethodForSession$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("CallDevToolsProtocolMethodForSession"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*CallDevToolsProtocolMethodForSession)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, LPCWSTR, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout CallDevToolsProtocolMethodForSession$layout() {
		return CallDevToolsProtocolMethodForSession$LAYOUT;
	}
	
	private static final long CallDevToolsProtocolMethodForSession$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("CallDevToolsProtocolMethodForSession"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*CallDevToolsProtocolMethodForSession)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, LPCWSTR, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static long CallDevToolsProtocolMethodForSession$offset() {
		return CallDevToolsProtocolMethodForSession$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*CallDevToolsProtocolMethodForSession)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, LPCWSTR, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment CallDevToolsProtocolMethodForSession(MemorySegment struct) {
		return struct.get(CallDevToolsProtocolMethodForSession$LAYOUT, CallDevToolsProtocolMethodForSession$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*CallDevToolsProtocolMethodForSession)(ICoreWebView2_22 *, LPCWSTR, LPCWSTR, LPCWSTR, ICoreWebView2CallDevToolsProtocolMethodCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static void CallDevToolsProtocolMethodForSession(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(CallDevToolsProtocolMethodForSession$LAYOUT, CallDevToolsProtocolMethodForSession$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_ContextMenuRequested)(ICoreWebView2_22 *, ICoreWebView2ContextMenuRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_ContextMenuRequested {
		
		add_ContextMenuRequested() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_ContextMenuRequested.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_ContextMenuRequested.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_ContextMenuRequested$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_ContextMenuRequested"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ContextMenuRequested)(ICoreWebView2_22 *, ICoreWebView2ContextMenuRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_ContextMenuRequested$layout() {
		return add_ContextMenuRequested$LAYOUT;
	}
	
	private static final long add_ContextMenuRequested$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_ContextMenuRequested"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ContextMenuRequested)(ICoreWebView2_22 *, ICoreWebView2ContextMenuRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_ContextMenuRequested$offset() {
		return add_ContextMenuRequested$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ContextMenuRequested)(ICoreWebView2_22 *, ICoreWebView2ContextMenuRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_ContextMenuRequested(MemorySegment struct) {
		return struct.get(add_ContextMenuRequested$LAYOUT, add_ContextMenuRequested$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ContextMenuRequested)(ICoreWebView2_22 *, ICoreWebView2ContextMenuRequestedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_ContextMenuRequested(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_ContextMenuRequested$LAYOUT, add_ContextMenuRequested$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_ContextMenuRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_ContextMenuRequested {
		
		remove_ContextMenuRequested() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_ContextMenuRequested.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_ContextMenuRequested.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_ContextMenuRequested$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_ContextMenuRequested"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ContextMenuRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_ContextMenuRequested$layout() {
		return remove_ContextMenuRequested$LAYOUT;
	}
	
	private static final long remove_ContextMenuRequested$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_ContextMenuRequested"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ContextMenuRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_ContextMenuRequested$offset() {
		return remove_ContextMenuRequested$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ContextMenuRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_ContextMenuRequested(MemorySegment struct) {
		return struct.get(remove_ContextMenuRequested$LAYOUT, remove_ContextMenuRequested$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ContextMenuRequested)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_ContextMenuRequested(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_ContextMenuRequested$LAYOUT, remove_ContextMenuRequested$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_StatusBarTextChanged)(ICoreWebView2_22 *, ICoreWebView2StatusBarTextChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_StatusBarTextChanged {
		
		add_StatusBarTextChanged() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_StatusBarTextChanged.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_StatusBarTextChanged.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_StatusBarTextChanged$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_StatusBarTextChanged"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_StatusBarTextChanged)(ICoreWebView2_22 *, ICoreWebView2StatusBarTextChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_StatusBarTextChanged$layout() {
		return add_StatusBarTextChanged$LAYOUT;
	}
	
	private static final long add_StatusBarTextChanged$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_StatusBarTextChanged"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_StatusBarTextChanged)(ICoreWebView2_22 *, ICoreWebView2StatusBarTextChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_StatusBarTextChanged$offset() {
		return add_StatusBarTextChanged$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_StatusBarTextChanged)(ICoreWebView2_22 *, ICoreWebView2StatusBarTextChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_StatusBarTextChanged(MemorySegment struct) {
		return struct.get(add_StatusBarTextChanged$LAYOUT, add_StatusBarTextChanged$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_StatusBarTextChanged)(ICoreWebView2_22 *, ICoreWebView2StatusBarTextChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_StatusBarTextChanged(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_StatusBarTextChanged$LAYOUT, add_StatusBarTextChanged$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_StatusBarTextChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_StatusBarTextChanged {
		
		remove_StatusBarTextChanged() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_StatusBarTextChanged.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_StatusBarTextChanged.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_StatusBarTextChanged$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_StatusBarTextChanged"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_StatusBarTextChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_StatusBarTextChanged$layout() {
		return remove_StatusBarTextChanged$LAYOUT;
	}
	
	private static final long remove_StatusBarTextChanged$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_StatusBarTextChanged"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_StatusBarTextChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_StatusBarTextChanged$offset() {
		return remove_StatusBarTextChanged$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_StatusBarTextChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_StatusBarTextChanged(MemorySegment struct) {
		return struct.get(remove_StatusBarTextChanged$LAYOUT, remove_StatusBarTextChanged$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_StatusBarTextChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_StatusBarTextChanged(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_StatusBarTextChanged$LAYOUT, remove_StatusBarTextChanged$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_StatusBarText)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall))
	 *}
	 */
	public static class get_StatusBarText {
		
		get_StatusBarText() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_StatusBarText.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_StatusBarText.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_StatusBarText$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_StatusBarText"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_StatusBarText)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_StatusBarText$layout() {
		return get_StatusBarText$LAYOUT;
	}
	
	private static final long get_StatusBarText$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_StatusBarText"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_StatusBarText)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall))
	 *}
	 */
	public static long get_StatusBarText$offset() {
		return get_StatusBarText$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_StatusBarText)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_StatusBarText(MemorySegment struct) {
		return struct.get(get_StatusBarText$LAYOUT, get_StatusBarText$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_StatusBarText)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall))
	 *}
	 */
	public static void get_StatusBarText(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_StatusBarText$LAYOUT, get_StatusBarText$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_Profile)(ICoreWebView2_22 *, ICoreWebView2Profile **) __attribute__((stdcall))
	 *}
	 */
	public static class get_Profile {
		
		get_Profile() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_Profile.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_Profile.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_Profile$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_Profile"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_Profile)(ICoreWebView2_22 *, ICoreWebView2Profile **) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_Profile$layout() {
		return get_Profile$LAYOUT;
	}
	
	private static final long get_Profile$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_Profile"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_Profile)(ICoreWebView2_22 *, ICoreWebView2Profile **) __attribute__((stdcall))
	 *}
	 */
	public static long get_Profile$offset() {
		return get_Profile$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_Profile)(ICoreWebView2_22 *, ICoreWebView2Profile **) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_Profile(MemorySegment struct) {
		return struct.get(get_Profile$LAYOUT, get_Profile$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_Profile)(ICoreWebView2_22 *, ICoreWebView2Profile **) __attribute__((stdcall))
	 *}
	 */
	public static void get_Profile(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_Profile$LAYOUT, get_Profile$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_ServerCertificateErrorDetected)(ICoreWebView2_22 *, ICoreWebView2ServerCertificateErrorDetectedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_ServerCertificateErrorDetected {
		
		add_ServerCertificateErrorDetected() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_ServerCertificateErrorDetected.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_ServerCertificateErrorDetected.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_ServerCertificateErrorDetected$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_ServerCertificateErrorDetected"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ServerCertificateErrorDetected)(ICoreWebView2_22 *, ICoreWebView2ServerCertificateErrorDetectedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_ServerCertificateErrorDetected$layout() {
		return add_ServerCertificateErrorDetected$LAYOUT;
	}
	
	private static final long add_ServerCertificateErrorDetected$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_ServerCertificateErrorDetected"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ServerCertificateErrorDetected)(ICoreWebView2_22 *, ICoreWebView2ServerCertificateErrorDetectedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_ServerCertificateErrorDetected$offset() {
		return add_ServerCertificateErrorDetected$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ServerCertificateErrorDetected)(ICoreWebView2_22 *, ICoreWebView2ServerCertificateErrorDetectedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_ServerCertificateErrorDetected(MemorySegment struct) {
		return struct.get(add_ServerCertificateErrorDetected$LAYOUT, add_ServerCertificateErrorDetected$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_ServerCertificateErrorDetected)(ICoreWebView2_22 *, ICoreWebView2ServerCertificateErrorDetectedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_ServerCertificateErrorDetected(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_ServerCertificateErrorDetected$LAYOUT, add_ServerCertificateErrorDetected$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_ServerCertificateErrorDetected)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_ServerCertificateErrorDetected {
		
		remove_ServerCertificateErrorDetected() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_ServerCertificateErrorDetected.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_ServerCertificateErrorDetected.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_ServerCertificateErrorDetected$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_ServerCertificateErrorDetected"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ServerCertificateErrorDetected)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_ServerCertificateErrorDetected$layout() {
		return remove_ServerCertificateErrorDetected$LAYOUT;
	}
	
	private static final long remove_ServerCertificateErrorDetected$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_ServerCertificateErrorDetected"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ServerCertificateErrorDetected)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_ServerCertificateErrorDetected$offset() {
		return remove_ServerCertificateErrorDetected$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ServerCertificateErrorDetected)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_ServerCertificateErrorDetected(MemorySegment struct) {
		return struct.get(remove_ServerCertificateErrorDetected$LAYOUT, remove_ServerCertificateErrorDetected$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_ServerCertificateErrorDetected)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_ServerCertificateErrorDetected(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_ServerCertificateErrorDetected$LAYOUT, remove_ServerCertificateErrorDetected$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*ClearServerCertificateErrorActions)(ICoreWebView2_22 *, ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static class ClearServerCertificateErrorActions {
		
		ClearServerCertificateErrorActions() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(ClearServerCertificateErrorActions.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(ClearServerCertificateErrorActions.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout ClearServerCertificateErrorActions$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("ClearServerCertificateErrorActions"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*ClearServerCertificateErrorActions)(ICoreWebView2_22 *, ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout ClearServerCertificateErrorActions$layout() {
		return ClearServerCertificateErrorActions$LAYOUT;
	}
	
	private static final long ClearServerCertificateErrorActions$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("ClearServerCertificateErrorActions"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*ClearServerCertificateErrorActions)(ICoreWebView2_22 *, ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static long ClearServerCertificateErrorActions$offset() {
		return ClearServerCertificateErrorActions$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*ClearServerCertificateErrorActions)(ICoreWebView2_22 *, ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment ClearServerCertificateErrorActions(MemorySegment struct) {
		return struct.get(ClearServerCertificateErrorActions$LAYOUT, ClearServerCertificateErrorActions$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*ClearServerCertificateErrorActions)(ICoreWebView2_22 *, ICoreWebView2ClearServerCertificateErrorActionsCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static void ClearServerCertificateErrorActions(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(ClearServerCertificateErrorActions$LAYOUT, ClearServerCertificateErrorActions$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_FaviconChanged)(ICoreWebView2_22 *, ICoreWebView2FaviconChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_FaviconChanged {
		
		add_FaviconChanged() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_FaviconChanged.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_FaviconChanged.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_FaviconChanged$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_FaviconChanged"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_FaviconChanged)(ICoreWebView2_22 *, ICoreWebView2FaviconChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_FaviconChanged$layout() {
		return add_FaviconChanged$LAYOUT;
	}
	
	private static final long add_FaviconChanged$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_FaviconChanged"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_FaviconChanged)(ICoreWebView2_22 *, ICoreWebView2FaviconChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_FaviconChanged$offset() {
		return add_FaviconChanged$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_FaviconChanged)(ICoreWebView2_22 *, ICoreWebView2FaviconChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_FaviconChanged(MemorySegment struct) {
		return struct.get(add_FaviconChanged$LAYOUT, add_FaviconChanged$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_FaviconChanged)(ICoreWebView2_22 *, ICoreWebView2FaviconChangedEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_FaviconChanged(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_FaviconChanged$LAYOUT, add_FaviconChanged$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_FaviconChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_FaviconChanged {
		
		remove_FaviconChanged() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_FaviconChanged.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_FaviconChanged.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_FaviconChanged$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_FaviconChanged"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_FaviconChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_FaviconChanged$layout() {
		return remove_FaviconChanged$LAYOUT;
	}
	
	private static final long remove_FaviconChanged$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_FaviconChanged"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_FaviconChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_FaviconChanged$offset() {
		return remove_FaviconChanged$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_FaviconChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_FaviconChanged(MemorySegment struct) {
		return struct.get(remove_FaviconChanged$LAYOUT, remove_FaviconChanged$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_FaviconChanged)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_FaviconChanged(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_FaviconChanged$LAYOUT, remove_FaviconChanged$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_FaviconUri)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall))
	 *}
	 */
	public static class get_FaviconUri {
		
		get_FaviconUri() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_FaviconUri.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_FaviconUri.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_FaviconUri$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_FaviconUri"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_FaviconUri)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_FaviconUri$layout() {
		return get_FaviconUri$LAYOUT;
	}
	
	private static final long get_FaviconUri$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_FaviconUri"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_FaviconUri)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall))
	 *}
	 */
	public static long get_FaviconUri$offset() {
		return get_FaviconUri$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_FaviconUri)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_FaviconUri(MemorySegment struct) {
		return struct.get(get_FaviconUri$LAYOUT, get_FaviconUri$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_FaviconUri)(ICoreWebView2_22 *, LPWSTR *) __attribute__((stdcall))
	 *}
	 */
	public static void get_FaviconUri(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_FaviconUri$LAYOUT, get_FaviconUri$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*GetFavicon)(ICoreWebView2_22 *, COREWEBVIEW2_FAVICON_IMAGE_FORMAT, ICoreWebView2GetFaviconCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static class GetFavicon {
		
		GetFavicon() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, int _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_INT,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(GetFavicon.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(GetFavicon.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout GetFavicon$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("GetFavicon"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*GetFavicon)(ICoreWebView2_22 *, COREWEBVIEW2_FAVICON_IMAGE_FORMAT, ICoreWebView2GetFaviconCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout GetFavicon$layout() {
		return GetFavicon$LAYOUT;
	}
	
	private static final long GetFavicon$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("GetFavicon"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*GetFavicon)(ICoreWebView2_22 *, COREWEBVIEW2_FAVICON_IMAGE_FORMAT, ICoreWebView2GetFaviconCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static long GetFavicon$offset() {
		return GetFavicon$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*GetFavicon)(ICoreWebView2_22 *, COREWEBVIEW2_FAVICON_IMAGE_FORMAT, ICoreWebView2GetFaviconCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment GetFavicon(MemorySegment struct) {
		return struct.get(GetFavicon$LAYOUT, GetFavicon$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*GetFavicon)(ICoreWebView2_22 *, COREWEBVIEW2_FAVICON_IMAGE_FORMAT, ICoreWebView2GetFaviconCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static void GetFavicon(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(GetFavicon$LAYOUT, GetFavicon$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*Print)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static class Print {
		
		Print() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(Print.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(Print.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout Print$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("Print"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*Print)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout Print$layout() {
		return Print$LAYOUT;
	}
	
	private static final long Print$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("Print"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*Print)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static long Print$offset() {
		return Print$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*Print)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment Print(MemorySegment struct) {
		return struct.get(Print$LAYOUT, Print$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*Print)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static void Print(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(Print$LAYOUT, Print$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*ShowPrintUI)(ICoreWebView2_22 *, COREWEBVIEW2_PRINT_DIALOG_KIND) __attribute__((stdcall))
	 *}
	 */
	public static class ShowPrintUI {
		
		ShowPrintUI() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, int _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_INT
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(ShowPrintUI.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(ShowPrintUI.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout ShowPrintUI$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("ShowPrintUI"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*ShowPrintUI)(ICoreWebView2_22 *, COREWEBVIEW2_PRINT_DIALOG_KIND) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout ShowPrintUI$layout() {
		return ShowPrintUI$LAYOUT;
	}
	
	private static final long ShowPrintUI$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("ShowPrintUI"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*ShowPrintUI)(ICoreWebView2_22 *, COREWEBVIEW2_PRINT_DIALOG_KIND) __attribute__((stdcall))
	 *}
	 */
	public static long ShowPrintUI$offset() {
		return ShowPrintUI$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*ShowPrintUI)(ICoreWebView2_22 *, COREWEBVIEW2_PRINT_DIALOG_KIND) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment ShowPrintUI(MemorySegment struct) {
		return struct.get(ShowPrintUI$LAYOUT, ShowPrintUI$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*ShowPrintUI)(ICoreWebView2_22 *, COREWEBVIEW2_PRINT_DIALOG_KIND) __attribute__((stdcall))
	 *}
	 */
	public static void ShowPrintUI(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(ShowPrintUI$LAYOUT, ShowPrintUI$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*PrintToPdfStream)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfStreamCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static class PrintToPdfStream {
		
		PrintToPdfStream() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(PrintToPdfStream.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(PrintToPdfStream.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout PrintToPdfStream$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("PrintToPdfStream"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*PrintToPdfStream)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfStreamCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout PrintToPdfStream$layout() {
		return PrintToPdfStream$LAYOUT;
	}
	
	private static final long PrintToPdfStream$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("PrintToPdfStream"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*PrintToPdfStream)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfStreamCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static long PrintToPdfStream$offset() {
		return PrintToPdfStream$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*PrintToPdfStream)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfStreamCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment PrintToPdfStream(MemorySegment struct) {
		return struct.get(PrintToPdfStream$LAYOUT, PrintToPdfStream$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*PrintToPdfStream)(ICoreWebView2_22 *, ICoreWebView2PrintSettings *, ICoreWebView2PrintToPdfStreamCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static void PrintToPdfStream(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(PrintToPdfStream$LAYOUT, PrintToPdfStream$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*PostSharedBufferToScript)(ICoreWebView2_22 *, ICoreWebView2SharedBuffer *, COREWEBVIEW2_SHARED_BUFFER_ACCESS, LPCWSTR) __attribute__((stdcall))
	 *}
	 */
	public static class PostSharedBufferToScript {
		
		PostSharedBufferToScript() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_INT,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(PostSharedBufferToScript.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(PostSharedBufferToScript.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, int _x2, MemorySegment _x3) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout PostSharedBufferToScript$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("PostSharedBufferToScript"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*PostSharedBufferToScript)(ICoreWebView2_22 *, ICoreWebView2SharedBuffer *, COREWEBVIEW2_SHARED_BUFFER_ACCESS, LPCWSTR) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout PostSharedBufferToScript$layout() {
		return PostSharedBufferToScript$LAYOUT;
	}
	
	private static final long PostSharedBufferToScript$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("PostSharedBufferToScript"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*PostSharedBufferToScript)(ICoreWebView2_22 *, ICoreWebView2SharedBuffer *, COREWEBVIEW2_SHARED_BUFFER_ACCESS, LPCWSTR) __attribute__((stdcall))
	 *}
	 */
	public static long PostSharedBufferToScript$offset() {
		return PostSharedBufferToScript$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*PostSharedBufferToScript)(ICoreWebView2_22 *, ICoreWebView2SharedBuffer *, COREWEBVIEW2_SHARED_BUFFER_ACCESS, LPCWSTR) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment PostSharedBufferToScript(MemorySegment struct) {
		return struct.get(PostSharedBufferToScript$LAYOUT, PostSharedBufferToScript$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*PostSharedBufferToScript)(ICoreWebView2_22 *, ICoreWebView2SharedBuffer *, COREWEBVIEW2_SHARED_BUFFER_ACCESS, LPCWSTR) __attribute__((stdcall))
	 *}
	 */
	public static void PostSharedBufferToScript(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(PostSharedBufferToScript$LAYOUT, PostSharedBufferToScript$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*add_LaunchingExternalUriScheme)(ICoreWebView2_22 *, ICoreWebView2LaunchingExternalUriSchemeEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static class add_LaunchingExternalUriScheme {
		
		add_LaunchingExternalUriScheme() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(add_LaunchingExternalUriScheme.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(add_LaunchingExternalUriScheme.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout add_LaunchingExternalUriScheme$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("add_LaunchingExternalUriScheme"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_LaunchingExternalUriScheme)(ICoreWebView2_22 *, ICoreWebView2LaunchingExternalUriSchemeEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout add_LaunchingExternalUriScheme$layout() {
		return add_LaunchingExternalUriScheme$LAYOUT;
	}
	
	private static final long add_LaunchingExternalUriScheme$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("add_LaunchingExternalUriScheme"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_LaunchingExternalUriScheme)(ICoreWebView2_22 *, ICoreWebView2LaunchingExternalUriSchemeEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static long add_LaunchingExternalUriScheme$offset() {
		return add_LaunchingExternalUriScheme$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_LaunchingExternalUriScheme)(ICoreWebView2_22 *, ICoreWebView2LaunchingExternalUriSchemeEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment add_LaunchingExternalUriScheme(MemorySegment struct) {
		return struct.get(add_LaunchingExternalUriScheme$LAYOUT, add_LaunchingExternalUriScheme$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*add_LaunchingExternalUriScheme)(ICoreWebView2_22 *, ICoreWebView2LaunchingExternalUriSchemeEventHandler *, EventRegistrationToken *) __attribute__((stdcall))
	 *}
	 */
	public static void add_LaunchingExternalUriScheme(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(add_LaunchingExternalUriScheme$LAYOUT, add_LaunchingExternalUriScheme$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*remove_LaunchingExternalUriScheme)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static class remove_LaunchingExternalUriScheme {
		
		remove_LaunchingExternalUriScheme() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				EventRegistrationToken.layout()
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(remove_LaunchingExternalUriScheme.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(remove_LaunchingExternalUriScheme.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout remove_LaunchingExternalUriScheme$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("remove_LaunchingExternalUriScheme"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_LaunchingExternalUriScheme)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout remove_LaunchingExternalUriScheme$layout() {
		return remove_LaunchingExternalUriScheme$LAYOUT;
	}
	
	private static final long remove_LaunchingExternalUriScheme$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("remove_LaunchingExternalUriScheme"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_LaunchingExternalUriScheme)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static long remove_LaunchingExternalUriScheme$offset() {
		return remove_LaunchingExternalUriScheme$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_LaunchingExternalUriScheme)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment remove_LaunchingExternalUriScheme(MemorySegment struct) {
		return struct.get(remove_LaunchingExternalUriScheme$LAYOUT, remove_LaunchingExternalUriScheme$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*remove_LaunchingExternalUriScheme)(ICoreWebView2_22 *, EventRegistrationToken) __attribute__((stdcall))
	 *}
	 */
	public static void remove_LaunchingExternalUriScheme(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(remove_LaunchingExternalUriScheme$LAYOUT, remove_LaunchingExternalUriScheme$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_MemoryUsageTargetLevel {
		
		get_MemoryUsageTargetLevel() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_MemoryUsageTargetLevel.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_MemoryUsageTargetLevel.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_MemoryUsageTargetLevel$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_MemoryUsageTargetLevel"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_MemoryUsageTargetLevel$layout() {
		return get_MemoryUsageTargetLevel$LAYOUT;
	}
	
	private static final long get_MemoryUsageTargetLevel$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_MemoryUsageTargetLevel"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_MemoryUsageTargetLevel$offset() {
		return get_MemoryUsageTargetLevel$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_MemoryUsageTargetLevel(MemorySegment struct) {
		return struct.get(get_MemoryUsageTargetLevel$LAYOUT, get_MemoryUsageTargetLevel$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_MemoryUsageTargetLevel(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_MemoryUsageTargetLevel$LAYOUT, get_MemoryUsageTargetLevel$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL) __attribute__((stdcall))
	 *}
	 */
	public static class put_MemoryUsageTargetLevel {
		
		put_MemoryUsageTargetLevel() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, int _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_INT
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(put_MemoryUsageTargetLevel.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_MemoryUsageTargetLevel.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_MemoryUsageTargetLevel$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_MemoryUsageTargetLevel"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_MemoryUsageTargetLevel$layout() {
		return put_MemoryUsageTargetLevel$LAYOUT;
	}
	
	private static final long put_MemoryUsageTargetLevel$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_MemoryUsageTargetLevel"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL) __attribute__((stdcall))
	 *}
	 */
	public static long put_MemoryUsageTargetLevel$offset() {
		return put_MemoryUsageTargetLevel$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_MemoryUsageTargetLevel(MemorySegment struct) {
		return struct.get(put_MemoryUsageTargetLevel$LAYOUT, put_MemoryUsageTargetLevel$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_MemoryUsageTargetLevel)(ICoreWebView2_22 *, COREWEBVIEW2_MEMORY_USAGE_TARGET_LEVEL) __attribute__((stdcall))
	 *}
	 */
	public static void put_MemoryUsageTargetLevel(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_MemoryUsageTargetLevel$LAYOUT, put_MemoryUsageTargetLevel$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_FrameId)(ICoreWebView2_22 *, UINT32 *) __attribute__((stdcall))
	 *}
	 */
	public static class get_FrameId {
		
		get_FrameId() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(get_FrameId.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_FrameId.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_FrameId$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_FrameId"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_FrameId)(ICoreWebView2_22 *, UINT32 *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_FrameId$layout() {
		return get_FrameId$LAYOUT;
	}
	
	private static final long get_FrameId$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_FrameId"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_FrameId)(ICoreWebView2_22 *, UINT32 *) __attribute__((stdcall))
	 *}
	 */
	public static long get_FrameId$offset() {
		return get_FrameId$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_FrameId)(ICoreWebView2_22 *, UINT32 *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_FrameId(MemorySegment struct) {
		return struct.get(get_FrameId$LAYOUT, get_FrameId$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_FrameId)(ICoreWebView2_22 *, UINT32 *) __attribute__((stdcall))
	 *}
	 */
	public static void get_FrameId(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_FrameId$LAYOUT, get_FrameId$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*ExecuteScriptWithResult)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2ExecuteScriptWithResultCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static class ExecuteScriptWithResult {
		
		ExecuteScriptWithResult() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(ExecuteScriptWithResult.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(ExecuteScriptWithResult.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout ExecuteScriptWithResult$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("ExecuteScriptWithResult"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*ExecuteScriptWithResult)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2ExecuteScriptWithResultCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout ExecuteScriptWithResult$layout() {
		return ExecuteScriptWithResult$LAYOUT;
	}
	
	private static final long ExecuteScriptWithResult$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("ExecuteScriptWithResult"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*ExecuteScriptWithResult)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2ExecuteScriptWithResultCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static long ExecuteScriptWithResult$offset() {
		return ExecuteScriptWithResult$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*ExecuteScriptWithResult)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2ExecuteScriptWithResultCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment ExecuteScriptWithResult(MemorySegment struct) {
		return struct.get(ExecuteScriptWithResult$LAYOUT, ExecuteScriptWithResult$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*ExecuteScriptWithResult)(ICoreWebView2_22 *, LPCWSTR, ICoreWebView2ExecuteScriptWithResultCompletedHandler *) __attribute__((stdcall))
	 *}
	 */
	public static void ExecuteScriptWithResult(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(ExecuteScriptWithResult$LAYOUT, ExecuteScriptWithResult$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*AddWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall))
	 *}
	 */
	public static class AddWebResourceRequestedFilterWithRequestSourceKinds {
		
		AddWebResourceRequestedFilterWithRequestSourceKinds() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_INT,
				Windows.C_INT
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(AddWebResourceRequestedFilterWithRequestSourceKinds.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(AddWebResourceRequestedFilterWithRequestSourceKinds.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout AddWebResourceRequestedFilterWithRequestSourceKinds$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("AddWebResourceRequestedFilterWithRequestSourceKinds"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*AddWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout AddWebResourceRequestedFilterWithRequestSourceKinds$layout() {
		return AddWebResourceRequestedFilterWithRequestSourceKinds$LAYOUT;
	}
	
	private static final long AddWebResourceRequestedFilterWithRequestSourceKinds$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("AddWebResourceRequestedFilterWithRequestSourceKinds"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*AddWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall))
	 *}
	 */
	public static long AddWebResourceRequestedFilterWithRequestSourceKinds$offset() {
		return AddWebResourceRequestedFilterWithRequestSourceKinds$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*AddWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment AddWebResourceRequestedFilterWithRequestSourceKinds(MemorySegment struct) {
		return struct.get(AddWebResourceRequestedFilterWithRequestSourceKinds$LAYOUT, AddWebResourceRequestedFilterWithRequestSourceKinds$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*AddWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall))
	 *}
	 */
	public static void AddWebResourceRequestedFilterWithRequestSourceKinds(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(AddWebResourceRequestedFilterWithRequestSourceKinds$LAYOUT, AddWebResourceRequestedFilterWithRequestSourceKinds$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*RemoveWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall))
	 *}
	 */
	public static class RemoveWebResourceRequestedFilterWithRequestSourceKinds {
		
		RemoveWebResourceRequestedFilterWithRequestSourceKinds() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, int _x2, int _x3);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				Windows.C_LONG,
				Windows.C_POINTER,
				Windows.C_POINTER,
				Windows.C_INT,
				Windows.C_INT
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = Windows.upcallHandle(RemoveWebResourceRequestedFilterWithRequestSourceKinds.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(RemoveWebResourceRequestedFilterWithRequestSourceKinds.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, int _x2, int _x3) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout RemoveWebResourceRequestedFilterWithRequestSourceKinds$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("RemoveWebResourceRequestedFilterWithRequestSourceKinds"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*RemoveWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout RemoveWebResourceRequestedFilterWithRequestSourceKinds$layout() {
		return RemoveWebResourceRequestedFilterWithRequestSourceKinds$LAYOUT;
	}
	
	private static final long RemoveWebResourceRequestedFilterWithRequestSourceKinds$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("RemoveWebResourceRequestedFilterWithRequestSourceKinds"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*RemoveWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall))
	 *}
	 */
	public static long RemoveWebResourceRequestedFilterWithRequestSourceKinds$offset() {
		return RemoveWebResourceRequestedFilterWithRequestSourceKinds$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*RemoveWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment RemoveWebResourceRequestedFilterWithRequestSourceKinds(MemorySegment struct) {
		return struct.get(RemoveWebResourceRequestedFilterWithRequestSourceKinds$LAYOUT, RemoveWebResourceRequestedFilterWithRequestSourceKinds$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*RemoveWebResourceRequestedFilterWithRequestSourceKinds)(ICoreWebView2_22 *, const LPCWSTR, const COREWEBVIEW2_WEB_RESOURCE_CONTEXT, const COREWEBVIEW2_WEB_RESOURCE_REQUEST_SOURCE_KINDS) __attribute__((stdcall))
	 *}
	 */
	public static void RemoveWebResourceRequestedFilterWithRequestSourceKinds(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(RemoveWebResourceRequestedFilterWithRequestSourceKinds$LAYOUT, RemoveWebResourceRequestedFilterWithRequestSourceKinds$OFFSET, fieldValue);
	}
	
	/**
	 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
	 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
	 */
	public static MemorySegment asSlice(MemorySegment array, long index) {
		return array.asSlice(layout().byteSize() * index);
	}
	
	/**
	 * The size (in bytes) of this struct
	 */
	public static long sizeof() {
		return layout().byteSize();
	}
	
	/**
	 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
	 */
	public static MemorySegment allocate(SegmentAllocator allocator) {
		return allocator.allocate(layout());
	}
	
	/**
	 * Allocate an array of size {@code elementCount} using {@code allocator}.
	 * The returned segment has size {@code elementCount * layout().byteSize()}.
	 */
	public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
		return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
	}
	
	/**
	 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
	 * The returned segment has size {@code layout().byteSize()}
	 */
	public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
		return reinterpret(addr, 1, arena, cleanup);
	}
	
	/**
	 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
	 * The returned segment has size {@code elementCount * layout().byteSize()}
	 */
	public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
		return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
	}
}
