// Generated by jextract

package org.jextract;

import java.lang.foreign.AddressLayout;
import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemoryLayout.PathElement;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.ValueLayout;
import java.util.function.Consumer;

import static java.lang.foreign.ValueLayout.OfInt;
import static java.lang.foreign.ValueLayout.OfLong;

/**
 * {@snippet lang=c :
 * struct tagMSG {
 *     HWND hwnd;
 *     UINT message;
 *     WPARAM wParam;
 *     LPARAM lParam;
 *     DWORD time;
 *     POINT pt;
 * }
 * }
 */
public class tagMSG {
	
	tagMSG() {
		// Should not be called directly
	}
	
	private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
			Windows.C_POINTER.withName("hwnd"),
			Windows.C_INT.withName("message"),
			MemoryLayout.paddingLayout(4),
			Windows.C_LONG_LONG.withName("wParam"),
			Windows.C_LONG_LONG.withName("lParam"),
			Windows.C_LONG.withName("time"),
			tagPOINT.layout().withName("pt"),
			MemoryLayout.paddingLayout(4)
	).withName("tagMSG");
	
	/**
	 * The layout of this struct
	 */
	public static GroupLayout layout() {
		return $LAYOUT;
	}
	
	private static final AddressLayout hwnd$LAYOUT = (AddressLayout)$LAYOUT.select(PathElement.groupElement("hwnd"));
	
	/**
	 * Layout for field:
	 * {@snippet lang=c :
	 * HWND hwnd
	 * }
	 */
	public static AddressLayout hwnd$layout() {
		return hwnd$LAYOUT;
	}
	
	private static final long hwnd$OFFSET = $LAYOUT.byteOffset(ValueLayout.PathElement.groupElement("hwnd"));
	
	/**
	 * Offset for field:
	 * {@snippet lang=c :
	 * HWND hwnd
	 * }
	 */
	public static long hwnd$offset() {
		return hwnd$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang=c :
	 * HWND hwnd
	 * }
	 */
	public static MemorySegment hwnd(MemorySegment struct) {
		return struct.get(hwnd$LAYOUT, hwnd$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang=c :
	 * HWND hwnd
	 * }
	 */
	public static void hwnd(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(hwnd$LAYOUT, hwnd$OFFSET, fieldValue);
	}
	
	private static final OfInt message$LAYOUT = (OfInt)$LAYOUT.select(PathElement.groupElement("message"));
	
	/**
	 * Layout for field:
	 * {@snippet lang=c :
	 * UINT message
	 * }
	 */
	public static OfInt message$layout() {
		return message$LAYOUT;
	}
	
	private static final long message$OFFSET = $LAYOUT.byteOffset(ValueLayout.PathElement.groupElement("message"));
	
	/**
	 * Offset for field:
	 * {@snippet lang=c :
	 * UINT message
	 * }
	 */
	public static long message$offset() {
		return message$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang=c :
	 * UINT message
	 * }
	 */
	public static int message(MemorySegment struct) {
		return struct.get(message$LAYOUT, message$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang=c :
	 * UINT message
	 * }
	 */
	public static void message(MemorySegment struct, int fieldValue) {
		struct.set(message$LAYOUT, message$OFFSET, fieldValue);
	}
	
	private static final OfLong wParam$LAYOUT = (OfLong)$LAYOUT.select(PathElement.groupElement("wParam"));
	
	/**
	 * Layout for field:
	 * {@snippet lang=c :
	 * WPARAM wParam
	 * }
	 */
	public static OfLong wParam$layout() {
		return wParam$LAYOUT;
	}
	
	private static final long wParam$OFFSET = $LAYOUT.byteOffset(ValueLayout.PathElement.groupElement("wParam"));
	
	/**
	 * Offset for field:
	 * {@snippet lang=c :
	 * WPARAM wParam
	 * }
	 */
	public static long wParam$offset() {
		return wParam$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang=c :
	 * WPARAM wParam
	 * }
	 */
	public static long wParam(MemorySegment struct) {
		return struct.get(wParam$LAYOUT, wParam$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang=c :
	 * WPARAM wParam
	 * }
	 */
	public static void wParam(MemorySegment struct, long fieldValue) {
		struct.set(wParam$LAYOUT, wParam$OFFSET, fieldValue);
	}
	
	private static final OfLong lParam$LAYOUT = (OfLong)$LAYOUT.select(PathElement.groupElement("lParam"));
	
	/**
	 * Layout for field:
	 * {@snippet lang=c :
	 * LPARAM lParam
	 * }
	 */
	public static OfLong lParam$layout() {
		return lParam$LAYOUT;
	}
	
	private static final long lParam$OFFSET = $LAYOUT.byteOffset(ValueLayout.PathElement.groupElement("lParam"));
	
	/**
	 * Offset for field:
	 * {@snippet lang=c :
	 * LPARAM lParam
	 * }
	 */
	public static long lParam$offset() {
		return lParam$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang=c :
	 * LPARAM lParam
	 * }
	 */
	public static long lParam(MemorySegment struct) {
		return struct.get(lParam$LAYOUT, lParam$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang=c :
	 * LPARAM lParam
	 * }
	 */
	public static void lParam(MemorySegment struct, long fieldValue) {
		struct.set(lParam$LAYOUT, lParam$OFFSET, fieldValue);
	}
	
	private static final OfInt time$LAYOUT = (OfInt)$LAYOUT.select(PathElement.groupElement("time"));
	
	/**
	 * Layout for field:
	 * {@snippet lang=c :
	 * DWORD time
	 * }
	 */
	public static OfInt time$layout() {
		return time$LAYOUT;
	}
	
	private static final long time$OFFSET = $LAYOUT.byteOffset(ValueLayout.PathElement.groupElement("time"));
	
	/**
	 * Offset for field:
	 * {@snippet lang=c :
	 * DWORD time
	 * }
	 */
	public static long time$offset() {
		return time$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang=c :
	 * DWORD time
	 * }
	 */
	public static int time(MemorySegment struct) {
		return struct.get(time$LAYOUT, time$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang=c :
	 * DWORD time
	 * }
	 */
	public static void time(MemorySegment struct, int fieldValue) {
		struct.set(time$LAYOUT, time$OFFSET, fieldValue);
	}
	
	private static final GroupLayout pt$LAYOUT = (GroupLayout)$LAYOUT.select(PathElement.groupElement("pt"));
	
	/**
	 * Layout for field:
	 * {@snippet lang=c :
	 * POINT pt
	 * }
	 */
	public static GroupLayout pt$layout() {
		return pt$LAYOUT;
	}
	
	private static final long pt$OFFSET = $LAYOUT.byteOffset(ValueLayout.PathElement.groupElement("pt"));
	
	/**
	 * Offset for field:
	 * {@snippet lang=c :
	 * POINT pt
	 * }
	 */
	public static long pt$offset() {
		return pt$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang=c :
	 * POINT pt
	 * }
	 */
	public static MemorySegment pt(MemorySegment struct) {
		return struct.asSlice(pt$OFFSET, pt$LAYOUT.byteSize());
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang=c :
	 * POINT pt
	 * }
	 */
	public static void pt(MemorySegment struct, MemorySegment fieldValue) {
		MemorySegment.copy(fieldValue, 0L, struct, pt$OFFSET, pt$LAYOUT.byteSize());
	}
	
	/**
	 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
	 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
	 */
	public static MemorySegment asSlice(MemorySegment array, long index) {
		return array.asSlice(layout().byteSize() * index);
	}
	
	/**
	 * The size (in bytes) of this struct
	 */
	public static long sizeof() { return layout().byteSize(); }
	
	/**
	 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
	 */
	public static MemorySegment allocate(SegmentAllocator allocator) {
		return allocator.allocate(layout());
	}
	
	/**
	 * Allocate an array of size {@code elementCount} using {@code allocator}.
	 * The returned segment has size {@code elementCount * layout().byteSize()}.
	 */
	public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
		return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
	}
	
	/**
	 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
	 * The returned segment has size {@code layout().byteSize()}
	 */
	public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
		return reinterpret(addr, 1, arena, cleanup);
	}
	
	/**
	 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
	 * The returned segment has size {@code elementCount * layout().byteSize()}
	 */
	public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
		return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
	}
}
