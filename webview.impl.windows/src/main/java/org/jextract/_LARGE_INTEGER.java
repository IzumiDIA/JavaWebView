// Generated by jextract

package org.jextract;

import java.lang.foreign.Arena;
import java.lang.foreign.GroupLayout;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemoryLayout.PathElement;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.foreign.UnionLayout;
import java.lang.foreign.ValueLayout;
import java.lang.foreign.ValueLayout.OfInt;
import java.lang.foreign.ValueLayout.OfLong;
import java.util.function.Consumer;

/**
 * {@snippet lang=c :
 * union _LARGE_INTEGER {
 *     struct {
 *         DWORD LowPart;
 *         LONG HighPart;
 *     };
 *     struct {
 *         DWORD LowPart;
 *         LONG HighPart;
 *     } u;
 *     LONGLONG QuadPart;
 * }
 * }
 */
public class _LARGE_INTEGER {
	
	_LARGE_INTEGER() {
		// Should not be called directly
	}
	
	private static final UnionLayout $LAYOUT = MemoryLayout.unionLayout(
			MemoryLayout.structLayout(
					LayoutUtils.DWORD.withName("LowPart"),
					LayoutUtils.LONG.withName("HighPart")
			).withName("$anon$875:5"),
			_LARGE_INTEGER.u.layout().withName("u"),
			LayoutUtils.LONGLONG.withName("QuadPart")
	).withName("_LARGE_INTEGER");
	
	/**
	 * The layout of this union
	 */
	public static UnionLayout layout() {
		return $LAYOUT;
	}
	
	private static final OfInt LowPart$LAYOUT = (OfInt)$LAYOUT.select(PathElement.groupElement("$anon$875:5"), PathElement.groupElement("LowPart"));
	
	/**
	 * Layout for field:
	 * {@snippet lang=c :
	 * DWORD LowPart
	 * }
	 */
	public static OfInt LowPart$layout() {
		return LowPart$LAYOUT;
	}
	
	private static final long LowPart$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("$anon$875:5"), PathElement.groupElement("LowPart"));
	
	/**
	 * Offset for field:
	 * {@snippet lang=c :
	 * DWORD LowPart
	 * }
	 */
	public static long LowPart$offset() {
		return LowPart$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang=c :
	 * DWORD LowPart
	 * }
	 */
	public static int LowPart(MemorySegment union) {
		return union.get(LowPart$LAYOUT, LowPart$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang=c :
	 * DWORD LowPart
	 * }
	 */
	public static void LowPart(MemorySegment union, int fieldValue) {
		union.set(LowPart$LAYOUT, LowPart$OFFSET, fieldValue);
	}
	
	private static final OfInt HighPart$LAYOUT = (OfInt)$LAYOUT.select(PathElement.groupElement("$anon$875:5"), PathElement.groupElement("HighPart"));
	
	/**
	 * Layout for field:
	 * {@snippet lang=c :
	 * LONG HighPart
	 * }
	 */
	public static OfInt HighPart$layout() {
		return HighPart$LAYOUT;
	}
	
	private static final long HighPart$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("$anon$875:5"), PathElement.groupElement("HighPart"));
	
	/**
	 * Offset for field:
	 * {@snippet lang=c :
	 * LONG HighPart
	 * }
	 */
	public static long HighPart$offset() {
		return HighPart$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang=c :
	 * LONG HighPart
	 * }
	 */
	public static int HighPart(MemorySegment union) {
		return union.get(HighPart$LAYOUT, HighPart$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang=c :
	 * LONG HighPart
	 * }
	 */
	public static void HighPart(MemorySegment union, int fieldValue) {
		union.set(HighPart$LAYOUT, HighPart$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang=c :
	 * struct {
	 *     DWORD LowPart;
	 *     LONG HighPart;
	 * }
	 * }
	 */
	public static class u {
		
		u() {
			// Should not be called directly
		}
		
		private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
				LayoutUtils.DWORD.withName("LowPart"),
				LayoutUtils.LONG.withName("HighPart")
		).withName("$anon$879:5");
		
		/**
		 * The layout of this struct
		 */
		public static GroupLayout layout() {
			return $LAYOUT;
		}
		
		private static final OfInt LowPart$LAYOUT = (OfInt)$LAYOUT.select(PathElement.groupElement("LowPart"));
		
		/**
		 * Layout for field:
		 * {@snippet lang=c :
		 * DWORD LowPart
		 * }
		 */
		public static OfInt LowPart$layout() {
			return LowPart$LAYOUT;
		}
		
		private static final long LowPart$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("LowPart"));
		
		/**
		 * Offset for field:
		 * {@snippet lang=c :
		 * DWORD LowPart
		 * }
		 */
		public static long LowPart$offset() {
			return LowPart$OFFSET;
		}
		
		/**
		 * Getter for field:
		 * {@snippet lang=c :
		 * DWORD LowPart
		 * }
		 */
		public static int LowPart(MemorySegment struct) {
			return struct.get(LowPart$LAYOUT, LowPart$OFFSET);
		}
		
		/**
		 * Setter for field:
		 * {@snippet lang=c :
		 * DWORD LowPart
		 * }
		 */
		public static void LowPart(MemorySegment struct, int fieldValue) {
			struct.set(LowPart$LAYOUT, LowPart$OFFSET, fieldValue);
		}
		
		private static final OfInt HighPart$LAYOUT = (OfInt)$LAYOUT.select(PathElement.groupElement("HighPart"));
		
		/**
		 * Layout for field:
		 * {@snippet lang=c :
		 * LONG HighPart
		 * }
		 */
		public static OfInt HighPart$layout() {
			return HighPart$LAYOUT;
		}
		
		private static final long HighPart$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("HighPart"));
		
		/**
		 * Offset for field:
		 * {@snippet lang=c :
		 * LONG HighPart
		 * }
		 */
		public static long HighPart$offset() {
			return HighPart$OFFSET;
		}
		
		/**
		 * Getter for field:
		 * {@snippet lang=c :
		 * LONG HighPart
		 * }
		 */
		public static int HighPart(MemorySegment struct) {
			return struct.get(HighPart$LAYOUT, HighPart$OFFSET);
		}
		
		/**
		 * Setter for field:
		 * {@snippet lang=c :
		 * LONG HighPart
		 * }
		 */
		public static void HighPart(MemorySegment struct, int fieldValue) {
			struct.set(HighPart$LAYOUT, HighPart$OFFSET, fieldValue);
		}
		
		/**
		 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
		 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
		 */
		public static MemorySegment asSlice(MemorySegment array, long index) {
			return array.asSlice(layout().byteSize() * index);
		}
		
		/**
		 * The size (in bytes) of this struct
		 */
		public static long sizeof() { return layout().byteSize(); }
		
		/**
		 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
		 */
		public static MemorySegment allocate(SegmentAllocator allocator) {
			return allocator.allocate(layout());
		}
		
		/**
		 * Allocate an array of size {@code elementCount} using {@code allocator}.
		 * The returned segment has size {@code elementCount * layout().byteSize()}.
		 */
		public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
			return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
		}
		
		/**
		 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
		 * The returned segment has size {@code layout().byteSize()}
		 */
		public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
			return reinterpret(addr, 1, arena, cleanup);
		}
		
		/**
		 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
		 * The returned segment has size {@code elementCount * layout().byteSize()}
		 */
		public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
			return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
		}
	}
	
	private static final GroupLayout u$LAYOUT = (GroupLayout)$LAYOUT.select(PathElement.groupElement("u"));
	
	/**
	 * Layout for field:
	 * {@snippet lang=c :
	 * struct {
	 *     DWORD LowPart;
	 *     LONG HighPart;
	 * } u
	 * }
	 */
	public static GroupLayout u$layout() {
		return u$LAYOUT;
	}
	
	private static final long u$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("u"));
	
	/**
	 * Offset for field:
	 * {@snippet lang=c :
	 * struct {
	 *     DWORD LowPart;
	 *     LONG HighPart;
	 * } u
	 * }
	 */
	public static long u$offset() {
		return u$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang=c :
	 * struct {
	 *     DWORD LowPart;
	 *     LONG HighPart;
	 * } u
	 * }
	 */
	public static MemorySegment u(MemorySegment union) {
		return union.asSlice(u$OFFSET, u$LAYOUT.byteSize());
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang=c :
	 * struct {
	 *     DWORD LowPart;
	 *     LONG HighPart;
	 * } u
	 * }
	 */
	public static void u(MemorySegment union, MemorySegment fieldValue) {
		MemorySegment.copy(fieldValue, 0L, union, u$OFFSET, u$LAYOUT.byteSize());
	}
	
	private static final OfLong QuadPart$LAYOUT = (OfLong)$LAYOUT.select(PathElement.groupElement("QuadPart"));
	
	/**
	 * Layout for field:
	 * {@snippet lang=c :
	 * LONGLONG QuadPart
	 * }
	 */
	public static OfLong QuadPart$layout() {
		return QuadPart$LAYOUT;
	}
	
	private static final long QuadPart$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("QuadPart"));
	
	/**
	 * Offset for field:
	 * {@snippet lang=c :
	 * LONGLONG QuadPart
	 * }
	 */
	public static long QuadPart$offset() {
		return QuadPart$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang=c :
	 * LONGLONG QuadPart
	 * }
	 */
	public static long QuadPart(MemorySegment union) {
		return union.get(QuadPart$LAYOUT, QuadPart$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang=c :
	 * LONGLONG QuadPart
	 * }
	 */
	public static void QuadPart(MemorySegment union, long fieldValue) {
		union.set(QuadPart$LAYOUT, QuadPart$OFFSET, fieldValue);
	}
	
	/**
	 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
	 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
	 */
	public static MemorySegment asSlice(MemorySegment array, long index) {
		return array.asSlice(layout().byteSize() * index);
	}
	
	/**
	 * The size (in bytes) of this union
	 */
	public static long sizeof() { return layout().byteSize(); }
	
	/**
	 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
	 */
	public static MemorySegment allocate(SegmentAllocator allocator) {
		return allocator.allocate(layout());
	}
	
	/**
	 * Allocate an array of size {@code elementCount} using {@code allocator}.
	 * The returned segment has size {@code elementCount * layout().byteSize()}.
	 */
	public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
		return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
	}
	
	/**
	 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
	 * The returned segment has size {@code layout().byteSize()}
	 */
	public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
		return reinterpret(addr, 1, arena, cleanup);
	}
	
	/**
	 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
	 * The returned segment has size {@code elementCount * layout().byteSize()}
	 */
	public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
		return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
	}
}
