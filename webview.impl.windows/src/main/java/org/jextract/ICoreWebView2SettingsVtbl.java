// Generated by jextract

package org.jextract;

import java.lang.foreign.*;
import java.lang.foreign.MemoryLayout.PathElement;
import java.lang.invoke.MethodHandle;
import java.util.function.Consumer;

/**
 * {@snippet lang = c:
 * struct ICoreWebView2SettingsVtbl {
 *     HRESULT (*QueryInterface)(ICoreWebView2Settings *, const IID *const, void **) __attribute__((stdcall));
 *     ULONG (*AddRef)(ICoreWebView2Settings *) __attribute__((stdcall));
 *     ULONG (*Release)(ICoreWebView2Settings *) __attribute__((stdcall));
 *     HRESULT (*get_IsScriptEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_IsScriptEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall));
 *     HRESULT (*get_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall));
 *     HRESULT (*get_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall));
 *     HRESULT (*get_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall));
 *     HRESULT (*get_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall));
 *     HRESULT (*get_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall));
 *     HRESULT (*get_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall));
 *     HRESULT (*get_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall));
 *     HRESULT (*get_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall));
 *     HRESULT (*put_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall));
 * }
 *}
 */
public class ICoreWebView2SettingsVtbl {
	
	ICoreWebView2SettingsVtbl() {
		// Should not be called directly
	}
	
	private static final StructLayout $LAYOUT = MemoryLayout.structLayout(
			LayoutUtils.C_POINTER.withName("QueryInterface"),
			LayoutUtils.C_POINTER.withName("AddRef"),
			LayoutUtils.C_POINTER.withName("Release"),
			LayoutUtils.C_POINTER.withName("get_IsScriptEnabled"),
			LayoutUtils.C_POINTER.withName("put_IsScriptEnabled"),
			LayoutUtils.C_POINTER.withName("get_IsWebMessageEnabled"),
			LayoutUtils.C_POINTER.withName("put_IsWebMessageEnabled"),
			LayoutUtils.C_POINTER.withName("get_AreDefaultScriptDialogsEnabled"),
			LayoutUtils.C_POINTER.withName("put_AreDefaultScriptDialogsEnabled"),
			LayoutUtils.C_POINTER.withName("get_IsStatusBarEnabled"),
			LayoutUtils.C_POINTER.withName("put_IsStatusBarEnabled"),
			LayoutUtils.C_POINTER.withName("get_AreDevToolsEnabled"),
			LayoutUtils.C_POINTER.withName("put_AreDevToolsEnabled"),
			LayoutUtils.C_POINTER.withName("get_AreDefaultContextMenusEnabled"),
			LayoutUtils.C_POINTER.withName("put_AreDefaultContextMenusEnabled"),
			LayoutUtils.C_POINTER.withName("get_AreHostObjectsAllowed"),
			LayoutUtils.C_POINTER.withName("put_AreHostObjectsAllowed"),
			LayoutUtils.C_POINTER.withName("get_IsZoomControlEnabled"),
			LayoutUtils.C_POINTER.withName("put_IsZoomControlEnabled"),
			LayoutUtils.C_POINTER.withName("get_IsBuiltInErrorPageEnabled"),
			LayoutUtils.C_POINTER.withName("put_IsBuiltInErrorPageEnabled")
	).withName("ICoreWebView2SettingsVtbl");
	
	/**
	 * The layout of this struct
	 */
	public static StructLayout layout() {
		return $LAYOUT;
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*QueryInterface)(ICoreWebView2Settings *, const IID *const, void **) __attribute__((stdcall))
	 *}
	 */
	public static class QueryInterface {
		
		QueryInterface() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				LayoutUtils.HRESULT,
				LayoutUtils.I_CORE_WEB_VIEW_2_SETTINGS_POINTER,
				LayoutUtils.IID_POINTER,
				LayoutUtils.VOID_POINTER_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(QueryInterface.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(QueryInterface.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout QueryInterface$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("QueryInterface"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*QueryInterface)(ICoreWebView2Settings *, const IID *const, void **) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout QueryInterface$layout() {
		return QueryInterface$LAYOUT;
	}
	
	private static final long QueryInterface$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("QueryInterface"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*QueryInterface)(ICoreWebView2Settings *, const IID *const, void **) __attribute__((stdcall))
	 *}
	 */
	public static long QueryInterface$offset() {
		return QueryInterface$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*QueryInterface)(ICoreWebView2Settings *, const IID *const, void **) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment QueryInterface(MemorySegment struct) {
		return struct.get(QueryInterface$LAYOUT, QueryInterface$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*QueryInterface)(ICoreWebView2Settings *, const IID *const, void **) __attribute__((stdcall))
	 *}
	 */
	public static void QueryInterface(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(QueryInterface$LAYOUT, QueryInterface$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * ULONG (*AddRef)(ICoreWebView2Settings *) __attribute__((stdcall))
	 *}
	 */
	public static class AddRef {
		
		AddRef() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				LayoutUtils.ULONG,
				LayoutUtils.I_CORE_WEB_VIEW_2_SETTINGS_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(AddRef.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(AddRef.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout AddRef$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("AddRef"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * ULONG (*AddRef)(ICoreWebView2Settings *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout AddRef$layout() {
		return AddRef$LAYOUT;
	}
	
	private static final long AddRef$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("AddRef"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * ULONG (*AddRef)(ICoreWebView2Settings *) __attribute__((stdcall))
	 *}
	 */
	public static long AddRef$offset() {
		return AddRef$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * ULONG (*AddRef)(ICoreWebView2Settings *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment AddRef(MemorySegment struct) {
		return struct.get(AddRef$LAYOUT, AddRef$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * ULONG (*AddRef)(ICoreWebView2Settings *) __attribute__((stdcall))
	 *}
	 */
	public static void AddRef(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(AddRef$LAYOUT, AddRef$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * ULONG (*Release)(ICoreWebView2Settings *) __attribute__((stdcall))
	 *}
	 */
	public static class Release {
		
		Release() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0);
		}
		
		private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
				LayoutUtils.ULONG,
				LayoutUtils.I_CORE_WEB_VIEW_2_SETTINGS_POINTER
		);
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(Release.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(Release.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout Release$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("Release"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * ULONG (*Release)(ICoreWebView2Settings *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout Release$layout() {
		return Release$LAYOUT;
	}
	
	private static final long Release$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("Release"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * ULONG (*Release)(ICoreWebView2Settings *) __attribute__((stdcall))
	 *}
	 */
	public static long Release$offset() {
		return Release$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * ULONG (*Release)(ICoreWebView2Settings *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment Release(MemorySegment struct) {
		return struct.get(Release$LAYOUT, Release$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * ULONG (*Release)(ICoreWebView2Settings *) __attribute__((stdcall))
	 *}
	 */
	public static void Release(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(Release$LAYOUT, Release$OFFSET, fieldValue);
	}
	
	private static final FunctionDescriptor
			GET_SETTING = FunctionDescriptor.of(
			LayoutUtils.HRESULT,
			LayoutUtils.I_CORE_WEB_VIEW_2_SETTINGS_POINTER,
			LayoutUtils.C_BOOL_POINTER
	),
			PUT_SETTING = FunctionDescriptor.of(
					LayoutUtils.HRESULT,
					LayoutUtils.I_CORE_WEB_VIEW_2_SETTINGS_POINTER,
					LayoutUtils.C_BOOL
			);
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_IsScriptEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_IsScriptEnabled {
		
		get_IsScriptEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = GET_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(get_IsScriptEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_IsScriptEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_IsScriptEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_IsScriptEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsScriptEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_IsScriptEnabled$layout() {
		return get_IsScriptEnabled$LAYOUT;
	}
	
	private static final long get_IsScriptEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_IsScriptEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsScriptEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_IsScriptEnabled$offset() {
		return get_IsScriptEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsScriptEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_IsScriptEnabled(MemorySegment struct) {
		return struct.get(get_IsScriptEnabled$LAYOUT, get_IsScriptEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsScriptEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_IsScriptEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_IsScriptEnabled$LAYOUT, get_IsScriptEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_IsScriptEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static class put_IsScriptEnabled {
		
		put_IsScriptEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, boolean _x1);
		}
		
		private static final FunctionDescriptor $DESC = PUT_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(put_IsScriptEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_IsScriptEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, boolean _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_IsScriptEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_IsScriptEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsScriptEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_IsScriptEnabled$layout() {
		return put_IsScriptEnabled$LAYOUT;
	}
	
	private static final long put_IsScriptEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_IsScriptEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsScriptEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static long put_IsScriptEnabled$offset() {
		return put_IsScriptEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsScriptEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_IsScriptEnabled(MemorySegment struct) {
		return struct.get(put_IsScriptEnabled$LAYOUT, put_IsScriptEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsScriptEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static void put_IsScriptEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_IsScriptEnabled$LAYOUT, put_IsScriptEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_IsWebMessageEnabled {
		
		get_IsWebMessageEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = GET_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(get_IsWebMessageEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_IsWebMessageEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_IsWebMessageEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_IsWebMessageEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_IsWebMessageEnabled$layout() {
		return get_IsWebMessageEnabled$LAYOUT;
	}
	
	private static final long get_IsWebMessageEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_IsWebMessageEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_IsWebMessageEnabled$offset() {
		return get_IsWebMessageEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_IsWebMessageEnabled(MemorySegment struct) {
		return struct.get(get_IsWebMessageEnabled$LAYOUT, get_IsWebMessageEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_IsWebMessageEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_IsWebMessageEnabled$LAYOUT, get_IsWebMessageEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static class put_IsWebMessageEnabled {
		
		put_IsWebMessageEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, boolean _x1);
		}
		
		private static final FunctionDescriptor $DESC = PUT_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(put_IsWebMessageEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_IsWebMessageEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, boolean _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_IsWebMessageEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_IsWebMessageEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_IsWebMessageEnabled$layout() {
		return put_IsWebMessageEnabled$LAYOUT;
	}
	
	private static final long put_IsWebMessageEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_IsWebMessageEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static long put_IsWebMessageEnabled$offset() {
		return put_IsWebMessageEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_IsWebMessageEnabled(MemorySegment struct) {
		return struct.get(put_IsWebMessageEnabled$LAYOUT, put_IsWebMessageEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsWebMessageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static void put_IsWebMessageEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_IsWebMessageEnabled$LAYOUT, put_IsWebMessageEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_AreDefaultScriptDialogsEnabled {
		
		get_AreDefaultScriptDialogsEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = GET_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(get_AreDefaultScriptDialogsEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_AreDefaultScriptDialogsEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_AreDefaultScriptDialogsEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_AreDefaultScriptDialogsEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_AreDefaultScriptDialogsEnabled$layout() {
		return get_AreDefaultScriptDialogsEnabled$LAYOUT;
	}
	
	private static final long get_AreDefaultScriptDialogsEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_AreDefaultScriptDialogsEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_AreDefaultScriptDialogsEnabled$offset() {
		return get_AreDefaultScriptDialogsEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_AreDefaultScriptDialogsEnabled(MemorySegment struct) {
		return struct.get(get_AreDefaultScriptDialogsEnabled$LAYOUT, get_AreDefaultScriptDialogsEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_AreDefaultScriptDialogsEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_AreDefaultScriptDialogsEnabled$LAYOUT, get_AreDefaultScriptDialogsEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static class put_AreDefaultScriptDialogsEnabled {
		
		put_AreDefaultScriptDialogsEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, boolean _x1);
		}
		
		private static final FunctionDescriptor $DESC = PUT_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(put_AreDefaultScriptDialogsEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_AreDefaultScriptDialogsEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, boolean _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_AreDefaultScriptDialogsEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_AreDefaultScriptDialogsEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_AreDefaultScriptDialogsEnabled$layout() {
		return put_AreDefaultScriptDialogsEnabled$LAYOUT;
	}
	
	private static final long put_AreDefaultScriptDialogsEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_AreDefaultScriptDialogsEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static long put_AreDefaultScriptDialogsEnabled$offset() {
		return put_AreDefaultScriptDialogsEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_AreDefaultScriptDialogsEnabled(MemorySegment struct) {
		return struct.get(put_AreDefaultScriptDialogsEnabled$LAYOUT, put_AreDefaultScriptDialogsEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDefaultScriptDialogsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static void put_AreDefaultScriptDialogsEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_AreDefaultScriptDialogsEnabled$LAYOUT, put_AreDefaultScriptDialogsEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_IsStatusBarEnabled {
		
		get_IsStatusBarEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = GET_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(get_IsStatusBarEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_IsStatusBarEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_IsStatusBarEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_IsStatusBarEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_IsStatusBarEnabled$layout() {
		return get_IsStatusBarEnabled$LAYOUT;
	}
	
	private static final long get_IsStatusBarEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_IsStatusBarEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_IsStatusBarEnabled$offset() {
		return get_IsStatusBarEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_IsStatusBarEnabled(MemorySegment struct) {
		return struct.get(get_IsStatusBarEnabled$LAYOUT, get_IsStatusBarEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_IsStatusBarEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_IsStatusBarEnabled$LAYOUT, get_IsStatusBarEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static class put_IsStatusBarEnabled {
		
		put_IsStatusBarEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, boolean _x1);
		}
		
		private static final FunctionDescriptor $DESC = PUT_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(put_IsStatusBarEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_IsStatusBarEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, boolean _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_IsStatusBarEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_IsStatusBarEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_IsStatusBarEnabled$layout() {
		return put_IsStatusBarEnabled$LAYOUT;
	}
	
	private static final long put_IsStatusBarEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_IsStatusBarEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static long put_IsStatusBarEnabled$offset() {
		return put_IsStatusBarEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_IsStatusBarEnabled(MemorySegment struct) {
		return struct.get(put_IsStatusBarEnabled$LAYOUT, put_IsStatusBarEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsStatusBarEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static void put_IsStatusBarEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_IsStatusBarEnabled$LAYOUT, put_IsStatusBarEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_AreDevToolsEnabled {
		
		get_AreDevToolsEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = GET_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(get_AreDevToolsEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_AreDevToolsEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_AreDevToolsEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_AreDevToolsEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_AreDevToolsEnabled$layout() {
		return get_AreDevToolsEnabled$LAYOUT;
	}
	
	private static final long get_AreDevToolsEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_AreDevToolsEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_AreDevToolsEnabled$offset() {
		return get_AreDevToolsEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_AreDevToolsEnabled(MemorySegment struct) {
		return struct.get(get_AreDevToolsEnabled$LAYOUT, get_AreDevToolsEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_AreDevToolsEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_AreDevToolsEnabled$LAYOUT, get_AreDevToolsEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static class put_AreDevToolsEnabled {
		
		put_AreDevToolsEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, boolean _x1);
		}
		
		private static final FunctionDescriptor $DESC = PUT_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(put_AreDevToolsEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_AreDevToolsEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, boolean _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_AreDevToolsEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_AreDevToolsEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_AreDevToolsEnabled$layout() {
		return put_AreDevToolsEnabled$LAYOUT;
	}
	
	private static final long put_AreDevToolsEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_AreDevToolsEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static long put_AreDevToolsEnabled$offset() {
		return put_AreDevToolsEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_AreDevToolsEnabled(MemorySegment struct) {
		return struct.get(put_AreDevToolsEnabled$LAYOUT, put_AreDevToolsEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDevToolsEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static void put_AreDevToolsEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_AreDevToolsEnabled$LAYOUT, put_AreDevToolsEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_AreDefaultContextMenusEnabled {
		
		get_AreDefaultContextMenusEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = GET_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(get_AreDefaultContextMenusEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_AreDefaultContextMenusEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_AreDefaultContextMenusEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_AreDefaultContextMenusEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_AreDefaultContextMenusEnabled$layout() {
		return get_AreDefaultContextMenusEnabled$LAYOUT;
	}
	
	private static final long get_AreDefaultContextMenusEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_AreDefaultContextMenusEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_AreDefaultContextMenusEnabled$offset() {
		return get_AreDefaultContextMenusEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_AreDefaultContextMenusEnabled(MemorySegment struct) {
		return struct.get(get_AreDefaultContextMenusEnabled$LAYOUT, get_AreDefaultContextMenusEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_AreDefaultContextMenusEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_AreDefaultContextMenusEnabled$LAYOUT, get_AreDefaultContextMenusEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static class put_AreDefaultContextMenusEnabled {
		
		put_AreDefaultContextMenusEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, boolean _x1);
		}
		
		private static final FunctionDescriptor $DESC = PUT_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(put_AreDefaultContextMenusEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_AreDefaultContextMenusEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, boolean _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_AreDefaultContextMenusEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_AreDefaultContextMenusEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_AreDefaultContextMenusEnabled$layout() {
		return put_AreDefaultContextMenusEnabled$LAYOUT;
	}
	
	private static final long put_AreDefaultContextMenusEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_AreDefaultContextMenusEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static long put_AreDefaultContextMenusEnabled$offset() {
		return put_AreDefaultContextMenusEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_AreDefaultContextMenusEnabled(MemorySegment struct) {
		return struct.get(put_AreDefaultContextMenusEnabled$LAYOUT, put_AreDefaultContextMenusEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreDefaultContextMenusEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static void put_AreDefaultContextMenusEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_AreDefaultContextMenusEnabled$LAYOUT, put_AreDefaultContextMenusEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_AreHostObjectsAllowed {
		
		get_AreHostObjectsAllowed() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = GET_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(get_AreHostObjectsAllowed.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_AreHostObjectsAllowed.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_AreHostObjectsAllowed$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_AreHostObjectsAllowed"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_AreHostObjectsAllowed$layout() {
		return get_AreHostObjectsAllowed$LAYOUT;
	}
	
	private static final long get_AreHostObjectsAllowed$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_AreHostObjectsAllowed"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_AreHostObjectsAllowed$offset() {
		return get_AreHostObjectsAllowed$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_AreHostObjectsAllowed(MemorySegment struct) {
		return struct.get(get_AreHostObjectsAllowed$LAYOUT, get_AreHostObjectsAllowed$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_AreHostObjectsAllowed(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_AreHostObjectsAllowed$LAYOUT, get_AreHostObjectsAllowed$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static class put_AreHostObjectsAllowed {
		
		put_AreHostObjectsAllowed() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, int _x1);
		}
		
		private static final FunctionDescriptor $DESC = PUT_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(put_AreHostObjectsAllowed.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_AreHostObjectsAllowed.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_AreHostObjectsAllowed$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_AreHostObjectsAllowed"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_AreHostObjectsAllowed$layout() {
		return put_AreHostObjectsAllowed$LAYOUT;
	}
	
	private static final long put_AreHostObjectsAllowed$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_AreHostObjectsAllowed"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static long put_AreHostObjectsAllowed$offset() {
		return put_AreHostObjectsAllowed$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_AreHostObjectsAllowed(MemorySegment struct) {
		return struct.get(put_AreHostObjectsAllowed$LAYOUT, put_AreHostObjectsAllowed$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_AreHostObjectsAllowed)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static void put_AreHostObjectsAllowed(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_AreHostObjectsAllowed$LAYOUT, put_AreHostObjectsAllowed$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_IsZoomControlEnabled {
		
		get_IsZoomControlEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = GET_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(get_IsZoomControlEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_IsZoomControlEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_IsZoomControlEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_IsZoomControlEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_IsZoomControlEnabled$layout() {
		return get_IsZoomControlEnabled$LAYOUT;
	}
	
	private static final long get_IsZoomControlEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_IsZoomControlEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_IsZoomControlEnabled$offset() {
		return get_IsZoomControlEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_IsZoomControlEnabled(MemorySegment struct) {
		return struct.get(get_IsZoomControlEnabled$LAYOUT, get_IsZoomControlEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_IsZoomControlEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_IsZoomControlEnabled$LAYOUT, get_IsZoomControlEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static class put_IsZoomControlEnabled {
		
		put_IsZoomControlEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, boolean _x1);
		}
		
		private static final FunctionDescriptor $DESC = PUT_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(put_IsZoomControlEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_IsZoomControlEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, boolean _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_IsZoomControlEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_IsZoomControlEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_IsZoomControlEnabled$layout() {
		return put_IsZoomControlEnabled$LAYOUT;
	}
	
	private static final long put_IsZoomControlEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_IsZoomControlEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static long put_IsZoomControlEnabled$offset() {
		return put_IsZoomControlEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_IsZoomControlEnabled(MemorySegment struct) {
		return struct.get(put_IsZoomControlEnabled$LAYOUT, put_IsZoomControlEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsZoomControlEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static void put_IsZoomControlEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_IsZoomControlEnabled$LAYOUT, put_IsZoomControlEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*get_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static class get_IsBuiltInErrorPageEnabled {
		
		get_IsBuiltInErrorPageEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, MemorySegment _x1);
		}
		
		private static final FunctionDescriptor $DESC = GET_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(get_IsBuiltInErrorPageEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(get_IsBuiltInErrorPageEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, MemorySegment _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout get_IsBuiltInErrorPageEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("get_IsBuiltInErrorPageEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout get_IsBuiltInErrorPageEnabled$layout() {
		return get_IsBuiltInErrorPageEnabled$LAYOUT;
	}
	
	private static final long get_IsBuiltInErrorPageEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("get_IsBuiltInErrorPageEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static long get_IsBuiltInErrorPageEnabled$offset() {
		return get_IsBuiltInErrorPageEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment get_IsBuiltInErrorPageEnabled(MemorySegment struct) {
		return struct.get(get_IsBuiltInErrorPageEnabled$LAYOUT, get_IsBuiltInErrorPageEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*get_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL *) __attribute__((stdcall))
	 *}
	 */
	public static void get_IsBuiltInErrorPageEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(get_IsBuiltInErrorPageEnabled$LAYOUT, get_IsBuiltInErrorPageEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * {@snippet lang = c:
	 * HRESULT (*put_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static class put_IsBuiltInErrorPageEnabled {
		
		put_IsBuiltInErrorPageEnabled() {
			// Should not be called directly
		}
		
		/**
		 * The function pointer signature, expressed as a functional interface
		 */
		public interface Function {
			int apply(MemorySegment _x0, int _x1);
		}
		
		private static final FunctionDescriptor $DESC = PUT_SETTING;
		
		/**
		 * The descriptor of this function pointer
		 */
		public static FunctionDescriptor descriptor() {
			return $DESC;
		}
		
		private static final MethodHandle UP$MH = FFMUtils.upcallHandle(put_IsBuiltInErrorPageEnabled.Function.class, "apply", $DESC);
		
		/**
		 * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
		 * The lifetime of the returned segment is managed by {@code arena}
		 */
		public static MemorySegment allocate(put_IsBuiltInErrorPageEnabled.Function fi, Arena arena) {
			return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
		}
		
		private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);
		
		/**
		 * Invoke the upcall stub {@code funcPtr}, with given parameters
		 */
		public static int invoke(MemorySegment funcPtr, MemorySegment _x0, int _x1) {
			try {
				return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
			} catch (Throwable ex$) {
				throw new AssertionError("should not reach here", ex$);
			}
		}
	}
	
	private static final AddressLayout put_IsBuiltInErrorPageEnabled$LAYOUT = (AddressLayout) $LAYOUT.select(PathElement.groupElement("put_IsBuiltInErrorPageEnabled"));
	
	/**
	 * Layout for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static AddressLayout put_IsBuiltInErrorPageEnabled$layout() {
		return put_IsBuiltInErrorPageEnabled$LAYOUT;
	}
	
	private static final long put_IsBuiltInErrorPageEnabled$OFFSET = $LAYOUT.byteOffset(PathElement.groupElement("put_IsBuiltInErrorPageEnabled"));
	
	/**
	 * Offset for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static long put_IsBuiltInErrorPageEnabled$offset() {
		return put_IsBuiltInErrorPageEnabled$OFFSET;
	}
	
	/**
	 * Getter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static MemorySegment put_IsBuiltInErrorPageEnabled(MemorySegment struct) {
		return struct.get(put_IsBuiltInErrorPageEnabled$LAYOUT, put_IsBuiltInErrorPageEnabled$OFFSET);
	}
	
	/**
	 * Setter for field:
	 * {@snippet lang = c:
	 * HRESULT (*put_IsBuiltInErrorPageEnabled)(ICoreWebView2Settings *, BOOL) __attribute__((stdcall))
	 *}
	 */
	public static void put_IsBuiltInErrorPageEnabled(MemorySegment struct, MemorySegment fieldValue) {
		struct.set(put_IsBuiltInErrorPageEnabled$LAYOUT, put_IsBuiltInErrorPageEnabled$OFFSET, fieldValue);
	}
	
	/**
	 * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
	 * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
	 */
	public static MemorySegment asSlice(MemorySegment array, long index) {
		return array.asSlice(layout().byteSize() * index);
	}
	
	/**
	 * The size (in bytes) of this struct
	 */
	public static long sizeof() {
		return layout().byteSize();
	}
	
	/**
	 * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
	 */
	public static MemorySegment allocate(SegmentAllocator allocator) {
		return allocator.allocate(layout());
	}
	
	/**
	 * Allocate an array of size {@code elementCount} using {@code allocator}.
	 * The returned segment has size {@code elementCount * layout().byteSize()}.
	 */
	public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
		return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
	}
	
	/**
	 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
	 * The returned segment has size {@code layout().byteSize()}
	 */
	public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
		return reinterpret(addr, 1, arena, cleanup);
	}
	
	/**
	 * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
	 * The returned segment has size {@code elementCount * layout().byteSize()}
	 */
	public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
		return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
	}
}
